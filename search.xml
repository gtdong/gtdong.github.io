<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>day01</title>
    <url>/2021/03/14/day01/</url>
    <content><![CDATA[<p>编程语言介绍与计算机基础</p>
<span id="more"></span>
<h1 id="编程语言介绍与计算机基础"><a href="#编程语言介绍与计算机基础" class="headerlink" title="编程语言介绍与计算机基础"></a>编程语言介绍与计算机基础</h1><p><a href="https://www.cnblogs.com/linhaifeng/articles/7133167.html#_label1">参考博客</a></p>
<h2 id="一-编程语言介绍"><a href="#一-编程语言介绍" class="headerlink" title="一 编程语言介绍"></a>一 编程语言介绍</h2><h3 id="1-什么是编程语言"><a href="#1-什么是编程语言" class="headerlink" title="1 什么是编程语言"></a>1 什么是编程语言</h3><p>能够被计算机所识别的表达方式即编程语言，语言是沟通的介质，而编程语言是程序员与计算机沟通的介质。在编程的世界里，计算机更像是人的奴隶，人类编程的目的就命令奴隶去工作</p>
<h3 id="2-什么是编程（-）"><a href="#2-什么是编程（-）" class="headerlink" title="2 什么是编程（******）"></a>2 什么是编程（******）</h3><p>编程即程序员根据需求把自己的思想流程按照某种编程语言的语法风格编写下来，产出的结果就是包含一堆字符的文件。<br>强调：程序在未运行前跟普通文件无异，只有程序在运行时，文件内所写的字符才有特定的语法意义　　 </p>
<h3 id="3-什么是程序"><a href="#3-什么是程序" class="headerlink" title="3 什么是程序"></a>3 什么是程序</h3><p>程序就是代码文件，程序又称之为软件，软件是计算机硬件的灵魂</p>
<h3 id="4、为何要编程"><a href="#4、为何要编程" class="headerlink" title="4、为何要编程"></a>4、为何要编程</h3><p>为了让计算机能够像人一样帮我们做事，从而把人解放出来<br>程序员———–》编程语言————-》计算机硬件</p>
<h2 id="二-计算机基础"><a href="#二-计算机基础" class="headerlink" title="二 计算机基础"></a>二 计算机基础</h2><h3 id="5、计算机硬件基础"><a href="#5、计算机硬件基础" class="headerlink" title="5、计算机硬件基础"></a>5、计算机硬件基础</h3><p>与运行程序有关的三大核心硬件（******）</p>
<ul>
<li>cpu</li>
<li>内存</li>
<li>硬盘</li>
</ul>
<p>计算机硬件五大组成部分：</p>
<ul>
<li><p>1、控制器：是计算机的指挥系统，负责控制所有其他硬件的运行—–》人的大脑</p>
</li>
<li><p>2、运算器：负责运算=》数学运算+逻辑运算———————–》人的大脑<br>控制器+运算器=》cpu————————————》人的大脑</p>
</li>
<li><p>3、存储器：存取数据<br>内存/主存：——————————————–》人脑的记忆功能<br>存放的是电信号，断电数据则丢失<br>只能临时保存数据<br>读写速度快<br>外存：————————————————-》本子<br>存放的是磁信号，断电数据仍然存在，可以永久保存数据<br>读写速度慢</p>
</li>
<li><p>4、输入设备input</p>
</li>
<li><p>5、输出设备output</p>
</li>
</ul>
<p><strong>程序的运行经历两个阶段</strong></p>
<ul>
<li>1、加载阶段<br>程序最先放在硬盘中<br>程序的运行需要把程序的代码从硬盘加载到内存中</li>
<li>2、运行阶段<br>然后cpu从内存中取代码执行<h3 id="6、操作系统"><a href="#6、操作系统" class="headerlink" title="6、操作系统"></a>6、操作系统</h3></li>
</ul>
<p><a href="https://www.zhihu.com/column/c_1189883314197168128">请点击！</a></p>
<h3 id="7、画计算机完整体系结构图（-）"><a href="#7、画计算机完整体系结构图（-）" class="headerlink" title="7、画计算机完整体系结构图（******）"></a>7、画计算机完整体系结构图（******）</h3><p><img src="https://images2018.cnblogs.com/blog/1036857/201803/1036857-20180314160549829-1723176303.png" alt="image"></p>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day02</title>
    <url>/2021/03/15/day02/</url>
    <content><![CDATA[<p>编程语言、基本数据类型</p>
<span id="more"></span>
<h2 id="1、编程语言"><a href="#1、编程语言" class="headerlink" title="1、编程语言"></a>1、编程语言</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>低级语言<ul>
<li>机器语言</li>
<li>汇编</li>
</ul>
</li>
<li>高级语言<ul>
<li>编译型(go、c)</li>
<li>解释型(python、shell)</li>
</ul>
</li>
</ul>
<p><strong>机器语言：</strong>直接使用二进制指令编写程序<br>优点：执行效率高<br>缺点：</p>
<ul>
<li>1、二进制指令非常难记，容易出错</li>
<li>2、即便是要实现一个小功能，需要用到的二进制指令的条数也非常多</li>
</ul>
<p><strong>汇编语言：</strong>用英文标签取代二进制指令去编写程序</p>
<p><strong>高级语言：</strong>用人类能理解的表达方式去编写程序,意味着计算机无法直接理解，必须经过翻译<br>eg:python<br><strong>python的三大特点</strong></p>
<ul>
<li>1、语法极简</li>
<li>2、第三方库丰富</li>
<li>3、封装程度高<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">机器语言</span><br><span class="line">#优点是最底层，执行速度最快</span><br><span class="line">#缺点是最复杂，开发效率最低</span><br><span class="line"></span><br><span class="line">汇编语言</span><br><span class="line">#优点是比较底层，执行速度最快</span><br><span class="line">#缺点是复杂，开发效率最低</span><br><span class="line"></span><br><span class="line">高级语言</span><br><span class="line">#编译型语言执行速度快，不依赖语言环境运行，跨平台差</span><br><span class="line">#解释型跨平台好，一份代码，到处使用，缺点是执行速度慢，依赖解释器运行</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、python解释器安装"><a href="#2、python解释器安装" class="headerlink" title="2、python解释器安装"></a>2、python解释器安装</h2><p>略</p>
<h2 id="3、编写第一个python程序"><a href="#3、编写第一个python程序" class="headerlink" title="3、编写第一个python程序"></a>3、编写第一个python程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="4、一个python程序运行所经历的三个阶段（-）"><a href="#4、一个python程序运行所经历的三个阶段（-）" class="headerlink" title="4、一个python程序运行所经历的三个阶段（******）"></a>4、一个python程序运行所经历的三个阶段（******）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 <span class="number">1.</span>py</span><br><span class="line">	</span><br><span class="line"><span class="number">1</span>、先启动python解释器</span><br><span class="line"><span class="number">2</span>、解释器会<span class="number">1.</span>py的内容从硬盘读入内存</span><br><span class="line"><span class="number">3</span>、解释器会解释执行刚刚读入内存的内容，开始识别python语法</span><br></pre></td></tr></table></figure>


<h2 id="5、注释"><a href="#5、注释" class="headerlink" title="5、注释"></a>5、注释</h2><p>单行注释<br>#</p>
<p>多行注释：```</p>
<h2 id="6、变量"><a href="#6、变量" class="headerlink" title="6、变量"></a>6、变量</h2><p><a href="https://www.cnblogs.com/linhaifeng/articles/7133167.html#_label7">博客参考</a></p>
<h2 id="7、基本数据类型"><a href="#7、基本数据类型" class="headerlink" title="7、基本数据类型"></a>7、基本数据类型</h2><p>数字（整形，长整形，浮点型，复数）<br>字符串<br>字节串：在介绍字符编码时介绍字节bytes类型<br>列表<br>元组<br>字典<br>集合</p>
<p><a href="https://www.cnblogs.com/linhaifeng/articles/7133357.html">博客参考</a><br><a href="https://www.zhihu.com/column/c_1189883314197168128">知乎参考</a></p>
<p>​<br>​<br>​<br>​<br>​<br>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day03</title>
    <url>/2021/03/16/day03/</url>
    <content><![CDATA[<p>变量</p>
<span id="more"></span>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="三问"><a href="#三问" class="headerlink" title="三问"></a>三问</h2><h3 id="1-什么是变量"><a href="#1-什么是变量" class="headerlink" title="1 什么是变量"></a>1 什么是变量</h3><p>量指的是事物的状态<br>变事物的状态是可以改变</p>
<p>变量就是一种存取内存的机制</p>
<h3 id="2-为何要用变量"><a href="#2-为何要用变量" class="headerlink" title="2 为何要用变量"></a>2 为何要用变量</h3><p>为了控制计算机能够像人一样记住事物的状态<br>并且状态是可以改变的</p>
<h3 id="3-如何用变量"><a href="#3-如何用变量" class="headerlink" title="3 如何用变量"></a>3 如何用变量</h3><p><strong>原则：</strong>先定义，后引用<br><strong>定义：</strong>变量名 = 变量值<br><strong>引用：</strong>变量名</p>
<h2 id="一、-变量的基本使用"><a href="#一、-变量的基本使用" class="headerlink" title="一、 变量的基本使用"></a>一、 变量的基本使用</h2><p>先定义、后引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">name = <span class="string">&quot;egon&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hell&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="二-变量的三大组成部分"><a href="#二-变量的三大组成部分" class="headerlink" title="二 变量的三大组成部分"></a>二 变量的三大组成部分</h2><p>name = “egon”<br>(1) 变量名：指向变量值的内存地址，用来访问值的<br>(2)赋值符号：用来把值的内存地址绑定给变量名<br>(3)变量值：记录的事物的状态，也就是我们存到内存中的数据</p>
<h2 id="三-变量名详解"><a href="#三-变量名详解" class="headerlink" title="三 变量名详解"></a>三 变量名详解</h2><h3 id="3-1-左值与右值"><a href="#3-1-左值与右值" class="headerlink" title="3.1 左值与右值"></a>3.1 左值与右值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">18</span>  <span class="comment"># 变量名出现在等号左边，称之为左值，此时的变量名是一种存值行为</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 只要不在等号左边，就称之为右值，此时的变量名是一种取值行为</span></span><br><span class="line">x = x + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-变量名的命名"><a href="#3-2-变量名的命名" class="headerlink" title="3.2 变量名的命名"></a>3.2 变量名的命名</h3><ul>
<li><strong>大前提：见名知意</strong></li>
<li><strong>规范</strong></li>
</ul>
<ol>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">level=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>=<span class="number">333</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">_name=<span class="string">&quot;egon&quot;</span></span><br><span class="line">_=<span class="string">&quot;egon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(_)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li> <strong>命令风格</strong><br>1、驼峰体<br>AgeOfEgon = 18<br>2、纯小写+下划线（推荐）<br>age_of_egon = 18</li>
</ul>
<h3 id="3-3-变量值"><a href="#3-3-变量值" class="headerlink" title="3.3 变量值"></a>3.3 变量值</h3><ul>
<li><strong>两大特征：id、type</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;egon&quot;</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(age))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))</span><br></pre></td></tr></table></figure></li>
<li><strong>内存管理机制之垃圾回收机制GC</strong><br>引用计数<br>x = 10  # 10引用计数为1<br>y = x  # 10引用计数为2</li>
</ul>
<p>x = 20 # 10的引用计数为1<br>del y  # 10的引用计数为0</p>
<p>分代回收<br>  优点：降低扫描数数量，提升效率<br>  缺点: 有个别数据无法得到及时的处理</p>
<p>循环引用导致的内存泄漏问题？？？-》标记/清除</p>
<ul>
<li><strong>内存管理机制之小整数池</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; 10000</span><br><span class="line">y &#x3D; 10000</span><br><span class="line">x&#x3D;&quot;egon:+-*?&quot;</span><br><span class="line">y&#x3D;&quot;egon:+-*?&quot;</span><br><span class="line">x&#x3D;[1,2,3]</span><br><span class="line">y&#x3D;[1,2,3]</span><br><span class="line">print(id(x))</span><br><span class="line">print(id(y))</span><br></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2></li>
</ul>
<h3 id="1、整型int"><a href="#1、整型int" class="headerlink" title="1、整型int"></a>1、整型int</h3><p>作用：年龄、等级、各种号码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))</span><br></pre></td></tr></table></figure>
<h3 id="2、浮点型float"><a href="#2、浮点型float" class="headerlink" title="2、浮点型float"></a>2、浮点型float</h3><p>作用：记录薪资、身高、体重等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">salary &#x3D; 5.5</span><br><span class="line">print(type(salary))</span><br><span class="line">height &#x3D; 1.81</span><br><span class="line">weight &#x3D; 73.5</span><br></pre></td></tr></table></figure>
<h3 id="3、字符串str"><a href="#3、字符串str" class="headerlink" title="3、字符串str"></a>3、字符串str</h3><p>作用：记录名字、字符相关的描述性的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;eg on你&quot;</span></span><br><span class="line">name = <span class="string">&#x27;eg on你&#x27;</span></span><br><span class="line">msg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">eg on你</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">msg= <span class="string">&quot;my name is &#x27;egon&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure>

<h3 id="4、列表类型list"><a href="#4、列表类型list" class="headerlink" title="4、列表类型list"></a>4、列表类型list</h3><p>作用：按照位置存放多个值，可以用索引取指定位置的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hobbies = <span class="string">&quot;read music play&quot;</span></span><br><span class="line">          <span class="number">0</span>        <span class="number">1</span>        <span class="number">2</span></span><br><span class="line">hobbies = [<span class="string">&quot;read&quot;</span>, <span class="string">&quot;music&quot;</span>, <span class="string">&quot;play&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(hobbies,<span class="built_in">type</span>(hobbies))</span><br><span class="line"><span class="built_in">print</span>(hobbies[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(hobbies[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>       <span class="number">3</span></span><br><span class="line">l = [<span class="number">10</span>,<span class="number">3.3</span>,<span class="string">&quot;aaa&quot;</span>,[<span class="number">666</span>,<span class="number">777</span>]]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(l[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">3</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h3 id="5、字典类型dict"><a href="#5、字典类型dict" class="headerlink" title="5、字典类型dict"></a>5、字典类型dict</h3><p>作用：按照key:value的形式存放多个值，其中value可以是任意类型，而key通常是str类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = [<span class="string">&quot;egon&quot;</span>,<span class="number">18</span>,<span class="string">&quot;male&quot;</span>,<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;egon&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="string">&quot;level&quot;</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(info[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;k1&quot;</span>:<span class="number">111</span>,</span><br><span class="line">    <span class="string">&quot;k2&quot;</span>:[<span class="number">666</span>,<span class="string">&quot;xxx&quot;</span>,&#123;<span class="string">&quot;kkk&quot;</span>:<span class="number">7777</span>&#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&quot;k2&quot;</span>][-<span class="number">1</span>][<span class="string">&#x27;kkk&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h3 id="6、布尔类型bool"><a href="#6、布尔类型bool" class="headerlink" title="6、布尔类型bool"></a>6、布尔类型bool</h3><ul>
<li><strong>（1）显式的布尔值：</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="literal">True</span></span><br><span class="line">y = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line">age1 = <span class="number">18</span></span><br><span class="line">age2 = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(age1 &gt; age2)</span><br><span class="line"><span class="built_in">print</span>(age1 == age2)</span><br></pre></td></tr></table></figure></li>
<li>**（2）隐式的布尔值: **0、None、空的布尔值为False，其余均为真<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="一、-算术运算符"><a href="#一、-算术运算符" class="headerlink" title="一、 算术运算符"></a>一、 算术运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10</span> + <span class="number">3.3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> / <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> // <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> % <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">了解：</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> + <span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span> * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 二、 比较运算</span></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(l1 == l2)  <span class="comment"># 值相等==的结果就成立</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l2))</span><br><span class="line"><span class="built_in">print</span>(l1 <span class="keyword">is</span> l2)  <span class="comment"># id一样is的结果才为True</span></span><br><span class="line"></span><br><span class="line">res1 = <span class="literal">True</span></span><br><span class="line">res2 = <span class="number">10</span> &gt; <span class="number">3</span></span><br><span class="line">res3 = <span class="number">11</span> == <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(res1,<span class="built_in">id</span>(res1))</span><br><span class="line"><span class="built_in">print</span>(res2,<span class="built_in">id</span>(res2))</span><br><span class="line"><span class="built_in">print</span>(res3,<span class="built_in">id</span>(res3))</span><br><span class="line"></span><br><span class="line">tag = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(tag <span class="keyword">is</span> <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> != <span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> &gt;= <span class="number">11</span>)</span><br></pre></td></tr></table></figure>
<h2 id="三-、赋值运算符"><a href="#三-、赋值运算符" class="headerlink" title="三 、赋值运算符"></a>三 、赋值运算符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-增量赋值"><a href="#3-1-增量赋值" class="headerlink" title="3.1 增量赋值"></a>3.1 增量赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age += <span class="number">3</span>  <span class="comment"># age = age + 3</span></span><br><span class="line">age /= <span class="number">3</span>  <span class="comment"># age = age / 3</span></span><br><span class="line"><span class="built_in">print</span>(age)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-链式赋值"><a href="#3-2-链式赋值" class="headerlink" title="3.2 链式赋值"></a>3.2 链式赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">10</span></span><br><span class="line">y=x</span><br><span class="line">z=y</span><br><span class="line">x=y=z=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="3-3-交叉赋值"><a href="#3-3-交叉赋值" class="headerlink" title="3.3 交叉赋值"></a>3.3 交叉赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">100</span></span><br><span class="line">n = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">temp=m</span><br><span class="line">m=n</span><br><span class="line">n=temp</span><br><span class="line">m,n=n,m</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<h3 id="3-4-解压赋值"><a href="#3-4-解压赋值" class="headerlink" title="3.4 解压赋值"></a>3.4 解压赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">salaries = [<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>]</span><br><span class="line">mon0 = salaries[<span class="number">0</span>]</span><br><span class="line">mon1 = salaries[<span class="number">1</span>]</span><br><span class="line">mon2 = salaries[<span class="number">2</span>]</span><br><span class="line">mon3 = salaries[<span class="number">3</span>]</span><br><span class="line">mon4 = salaries[<span class="number">4</span>]</span><br><span class="line">mon0,mon1,mon2,mon3,mon4=salaries</span><br><span class="line">mon0,mon1,mon2,mon3,mon4,mon5=salaries  <span class="comment"># 报错</span></span><br><span class="line">mon0,mon1,mon2,mon3=salaries  <span class="comment"># 报错</span></span><br><span class="line"><span class="built_in">print</span>(mon0,mon1,mon2,mon3,mon4)</span><br><span class="line"></span><br><span class="line">mon0,mon1,*_=salaries</span><br><span class="line"><span class="built_in">print</span>(mon0)</span><br><span class="line"><span class="built_in">print</span>(mon1)</span><br><span class="line"><span class="built_in">print</span>(_)</span><br><span class="line"></span><br><span class="line">mon0,mon1,*_,mon_last=salaries</span><br><span class="line"><span class="built_in">print</span>(mon0)</span><br><span class="line"><span class="built_in">print</span>(mon1)</span><br><span class="line"><span class="built_in">print</span>(mon_last)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四-、逻辑运算符"><a href="#四-、逻辑运算符" class="headerlink" title="四 、逻辑运算符"></a>四 、逻辑运算符</h2><p><a href="https://www.runoob.com/python3/python3-basic-operators.html#ysf4">参考</a></p>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day04</title>
    <url>/2021/03/17/day04/</url>
    <content><![CDATA[<p>if 、while、for语句</p>
<span id="more"></span>

<p>l1 = [111,]<br>l2 = [222,]</p>
<h1 id="l1-append-3333"><a href="#l1-append-3333" class="headerlink" title="l1.append(3333)"></a>l1.append(3333)</h1><h1 id="l1-append-4444"><a href="#l1-append-4444" class="headerlink" title="l1.append(4444)"></a>l1.append(4444)</h1><p>l1.append(l2)<br>l2.append(l1)</p>
<h1 id="print-l1-1-1-0"><a href="#print-l1-1-1-0" class="headerlink" title="print(l1[1][1][0])"></a>print(l1[1][1][0])</h1><p>del l1</p>
<h1 id="print-l2-1-0"><a href="#print-l2-1-0" class="headerlink" title="print(l2[1][0])"></a>print(l2[1][0])</h1><p>del l2</p>
<h1 id="标记-清除算法的核心："><a href="#标记-清除算法的核心：" class="headerlink" title="标记/清除算法的核心："></a>标记/清除算法的核心：</h1><h1 id="如果一个值没有关联任何一条以直接引用作为出发点的引用，那么该值就会被标记下来，并且清除"><a href="#如果一个值没有关联任何一条以直接引用作为出发点的引用，那么该值就会被标记下来，并且清除" class="headerlink" title="如果一个值没有关联任何一条以直接引用作为出发点的引用，那么该值就会被标记下来，并且清除"></a>如果一个值没有关联任何一条以直接引用作为出发点的引用，那么该值就会被标记下来，并且清除</h1><h1 id="如果一个变量值不存在任何以栈区为出发点的引用，那么标记-清除算法就认为它是垃圾"><a href="#如果一个变量值不存在任何以栈区为出发点的引用，那么标记-清除算法就认为它是垃圾" class="headerlink" title="如果一个变量值不存在任何以栈区为出发点的引用，那么标记/清除算法就认为它是垃圾"></a>如果一个变量值不存在任何以栈区为出发点的引用，那么标记/清除算法就认为它是垃圾</h1><h1 id="结果为布尔值（显式的、隐式的都算）的都可以当条件用"><a href="#结果为布尔值（显式的、隐式的都算）的都可以当条件用" class="headerlink" title="结果为布尔值（显式的、隐式的都算）的都可以当条件用"></a>结果为布尔值（显式的、隐式的都算）的都可以当条件用</h1><h1 id="not-把紧跟其后的那个条件取反"><a href="#not-把紧跟其后的那个条件取反" class="headerlink" title="not: 把紧跟其后的那个条件取反"></a>not: 把紧跟其后的那个条件取反</h1><h1 id="print-not-True"><a href="#print-not-True" class="headerlink" title="print(not True)"></a>print(not True)</h1><h1 id="print-not-10-gt-3"><a href="#print-not-10-gt-3" class="headerlink" title="print(not 10 &gt; 3)"></a>print(not 10 &gt; 3)</h1><h1 id="print-not-1"><a href="#print-not-1" class="headerlink" title="print(not 1)"></a>print(not 1)</h1><h1 id="print-not-0"><a href="#print-not-0" class="headerlink" title="print(not 0)"></a>print(not 0)</h1><h1 id="and：连接左右两个条件-两个条件必须都为True，最终结果才为True"><a href="#and：连接左右两个条件-两个条件必须都为True，最终结果才为True" class="headerlink" title="and：连接左右两个条件,两个条件必须都为True，最终结果才为True"></a>and：连接左右两个条件,两个条件必须都为True，最终结果才为True</h1><h1 id="print-10-gt-3-and-1-1"><a href="#print-10-gt-3-and-1-1" class="headerlink" title="print(10 &gt; 3 and 1 == 1)"></a>print(10 &gt; 3 and 1 == 1)</h1><h1 id="print-10-gt-3-and-1-1-and-3-lt-2-and-1-gt-0"><a href="#print-10-gt-3-and-1-1-and-3-lt-2-and-1-gt-0" class="headerlink" title="print(10 &gt; 3 and 1 == 1 and 3 &lt; 2 and 1 &gt; 0)"></a>print(10 &gt; 3 and 1 == 1 and 3 &lt; 2 and 1 &gt; 0)</h1><h1 id="or-连接左右两个条件-但凡有一个条件为True，最终结果就为True"><a href="#or-连接左右两个条件-但凡有一个条件为True，最终结果就为True" class="headerlink" title="or:连接左右两个条件,但凡有一个条件为True，最终结果就为True"></a>or:连接左右两个条件,但凡有一个条件为True，最终结果就为True</h1><h1 id="print-10-lt-3-or-“egon”-“egon”"><a href="#print-10-lt-3-or-“egon”-“egon”" class="headerlink" title="print(10 &lt; 3 or “egon” == “egon”)"></a>print(10 &lt; 3 or “egon” == “egon”)</h1><h1 id="print-10-gt-3-or-1-1-or-3-lt-2-or-1-gt-0"><a href="#print-10-gt-3-or-1-1-or-3-lt-2-or-1-gt-0" class="headerlink" title="print(10 &gt; 3 or 1 == 1 or 3 &lt; 2 or 1 &gt; 0)"></a>print(10 &gt; 3 or 1 == 1 or 3 &lt; 2 or 1 &gt; 0)</h1><h1 id="print-3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0"><a href="#print-3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0" class="headerlink" title="print(3&gt;4 and 4&gt;3 or not 1==3 and ‘x’ == ‘x’ or 3 &gt;3 and not ‘egon’ != “egon” or 1 &gt; 0)"></a>print(3&gt;4 and 4&gt;3 or not 1==3 and ‘x’ == ‘x’ or 3 &gt;3 and not ‘egon’ != “egon” or 1 &gt; 0)</h1><h1 id="3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0"><a href="#3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0" class="headerlink" title="(3&gt;4 and 4&gt;3) or (not 1==3 and ‘x’ == ‘x’) or (3 &gt;3 and not ‘egon’ != “egon”) or 1 &gt; 0"></a>(3&gt;4 and 4&gt;3) or (not 1==3 and ‘x’ == ‘x’) or (3 &gt;3 and not ‘egon’ != “egon”) or 1 &gt; 0</h1><h1 id="3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0-1"><a href="#3-gt-4-and-4-gt-3-or-not-1-3-and-‘x’-‘x’-or-3-gt-3-and-not-‘egon’-“egon”-or-1-gt-0-1" class="headerlink" title="3&gt;4 and (4&gt;3 or not 1==3) and ‘x’ == ‘x’ or 3 &gt;3 and not (‘egon’ != “egon” or 1 &gt; 0)"></a>3&gt;4 and (4&gt;3 or not 1==3) and ‘x’ == ‘x’ or 3 &gt;3 and not (‘egon’ != “egon” or 1 &gt; 0)</h1><h1 id="print-1-and-3"><a href="#print-1-and-3" class="headerlink" title="print(1 and 3)"></a>print(1 and 3)</h1><h1 id="print-1-and-3-or-4"><a href="#print-1-and-3-or-4" class="headerlink" title="print(1 and 3 or 4)"></a>print(1 and 3 or 4)</h1><h1 id="1-and-3-or-4"><a href="#1-and-3-or-4" class="headerlink" title="(1 and 3) or 4"></a>(1 and 3) or 4</h1><h1 id="控制计算机能够像人一样接收外界输入的内容"><a href="#控制计算机能够像人一样接收外界输入的内容" class="headerlink" title="控制计算机能够像人一样接收外界输入的内容"></a>控制计算机能够像人一样接收外界输入的内容</h1><h1 id="name-input-“请输入你的账号：”-“-1-2-3-”"><a href="#name-input-“请输入你的账号：”-“-1-2-3-”" class="headerlink" title="name = input(“请输入你的账号：”)  # “[1,2,3]”"></a>name = input(“请输入你的账号：”)  # “[1,2,3]”</h1><h1 id="print-name-type-name"><a href="#print-name-type-name" class="headerlink" title="print(name,type(name))"></a>print(name,type(name))</h1><h1 id="print-name-“egon”"><a href="#print-name-“egon”" class="headerlink" title="print(name == “egon”)"></a>print(name == “egon”)</h1><h1 id="age-input-“请输入你的年龄：”-age-”19”"><a href="#age-input-“请输入你的年龄：”-age-”19”" class="headerlink" title="age = input(“请输入你的年龄：”)  # age=”19”"></a>age = input(“请输入你的年龄：”)  # age=”19”</h1><h1 id="age-int-age"><a href="#age-int-age" class="headerlink" title="age=int(age)"></a>age=int(age)</h1><h1 id="print-age-gt-18-“19”-gt-18"><a href="#print-age-gt-18-“19”-gt-18" class="headerlink" title="print(age &gt; 18)  # “19” &gt; 18"></a>print(age &gt; 18)  # “19” &gt; 18</h1><h1 id="s1-“abcdef”"><a href="#s1-“abcdef”" class="headerlink" title="s1 = “abcdef”"></a>s1 = “abcdef”</h1><h1 id="s2-“az”"><a href="#s2-“az”" class="headerlink" title="s2 = “az”"></a>s2 = “az”</h1><h1 id="print-s2-gt-s1"><a href="#print-s2-gt-s1" class="headerlink" title="print(s2 &gt; s1)"></a>print(s2 &gt; s1)</h1><h1 id="l1-111-22-333"><a href="#l1-111-22-333" class="headerlink" title="l1 = [111,22,333]"></a>l1 = [111,22,333]</h1><h1 id="l2-111-666"><a href="#l2-111-666" class="headerlink" title="l2 = [111,666]"></a>l2 = [111,666]</h1><h1 id="l2-111-”666”"><a href="#l2-111-”666”" class="headerlink" title="l2 = [111,”666”]"></a>l2 = [111,”666”]</h1><h1 id="print-l1-gt-l2"><a href="#print-l1-gt-l2" class="headerlink" title="print(l1 &gt; l2)"></a>print(l1 &gt; l2)</h1><h1 id="控制计算机能够像人一样把自己的处理结果输出给用户"><a href="#控制计算机能够像人一样把自己的处理结果输出给用户" class="headerlink" title="控制计算机能够像人一样把自己的处理结果输出给用户"></a>控制计算机能够像人一样把自己的处理结果输出给用户</h1><h1 id="print-“hello1”-end-’-’"><a href="#print-“hello1”-end-’-’" class="headerlink" title="print(“hello1”,end=’*’)"></a>print(“hello1”,end=’*’)</h1><h1 id="print-“hello2”-end-’-’"><a href="#print-“hello2”-end-’-’" class="headerlink" title="print(“hello2”,end=’*’)"></a>print(“hello2”,end=’*’)</h1><h1 id="print-“hello3”-end-’-’"><a href="#print-“hello3”-end-’-’" class="headerlink" title="print(“hello3”,end=’*’)"></a>print(“hello3”,end=’*’)</h1><h1 id="msg-“my-name-is-s-my-age-is-s”-“egon”-”18”"><a href="#msg-“my-name-is-s-my-age-is-s”-“egon”-”18”" class="headerlink" title="msg = “my name is %s my age is %s” % (“egon”,”18”)"></a>msg = “my name is %s my age is %s” % (“egon”,”18”)</h1><h1 id="msg-“my-name-is-s-my-age-is-d”-“egon”-18"><a href="#msg-“my-name-is-s-my-age-is-d”-“egon”-18" class="headerlink" title="msg = “my name is %s my age is %d” % (“egon”,18)"></a>msg = “my name is %s my age is %d” % (“egon”,18)</h1><h1 id="msg-“my-name-is-s-my-age-is-s”-“egon”-18"><a href="#msg-“my-name-is-s-my-age-is-s”-“egon”-18" class="headerlink" title="msg = “my name is %s my age is %s” % (“egon”,18)"></a>msg = “my name is %s my age is %s” % (“egon”,18)</h1><h1 id="msg-“my-name-is-s-my-age-is-s”-“egon”-1-2-3"><a href="#msg-“my-name-is-s-my-age-is-s”-“egon”-1-2-3" class="headerlink" title="msg = “my name is %s my age is %s” % (“egon”,[1,2,3])"></a>msg = “my name is %s my age is %s” % (“egon”,[1,2,3])</h1><h1 id="print-msg"><a href="#print-msg" class="headerlink" title="print(msg)"></a>print(msg)</h1><p>“””<br>请输入您的用户名<br>请输入您的密码<br>判断 输入的用户名 等于 正确的用户名 并且 输入的密码 等于 正确的密码:<br>    告诉用户登录成功<br>否则:<br>    告诉用户账号密码错误<br>“””</p>
<p>“””<br>完整语法：<br>if 条件1:<br>    代码1<br>    代码2<br>    代码3<br>    …<br>elif 条件2:<br>    代码1<br>    代码2<br>    代码3<br>    …<br>elif 条件3:<br>    代码1<br>    代码2<br>    代码3<br>    …<br>……<br>else:<br>    代码1<br>    代码2<br>    代码3<br>    …<br>“””</p>
<h1 id="1、单分支"><a href="#1、单分支" class="headerlink" title="1、单分支"></a>1、单分支</h1><h1 id="print-‘start…’"><a href="#print-‘start…’" class="headerlink" title="print(‘start…’)"></a>print(‘start…’)</h1><h1 id="inp-name-input-“请输入您的用户名：”"><a href="#inp-name-input-“请输入您的用户名：”" class="headerlink" title="inp_name = input(“请输入您的用户名：”)"></a>inp_name = input(“请输入您的用户名：”)</h1><h1 id="if-inp-name-“egon”"><a href="#if-inp-name-“egon”" class="headerlink" title="if inp_name == “egon”:"></a>if inp_name == “egon”:</h1><h1 id="print-‘ok’"><a href="#print-‘ok’" class="headerlink" title="print(‘ok’)"></a>print(‘ok’)</h1><h1 id="print-‘end…’"><a href="#print-‘end…’" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="2、双分支"><a href="#2、双分支" class="headerlink" title="2、双分支"></a>2、双分支</h1><h1 id="print-‘start…’-1"><a href="#print-‘start…’-1" class="headerlink" title="print(‘start…’)"></a>print(‘start…’)</h1><h1 id="inp-name-input-“请输入您的用户名：”-1"><a href="#inp-name-input-“请输入您的用户名：”-1" class="headerlink" title="inp_name = input(“请输入您的用户名：”)"></a>inp_name = input(“请输入您的用户名：”)</h1><h1 id="if-inp-name-“egon”-1"><a href="#if-inp-name-“egon”-1" class="headerlink" title="if inp_name == “egon”:"></a>if inp_name == “egon”:</h1><h1 id="print-‘ok’-1"><a href="#print-‘ok’-1" class="headerlink" title="print(‘ok’)"></a>print(‘ok’)</h1><h1 id="else"><a href="#else" class="headerlink" title="else:"></a>else:</h1><h1 id="print-‘error’"><a href="#print-‘error’" class="headerlink" title="print(‘error’)"></a>print(‘error’)</h1><h1 id="print-‘end…’-1"><a href="#print-‘end…’-1" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="3、多分支"><a href="#3、多分支" class="headerlink" title="3、多分支"></a>3、多分支</h1><h1 id="如果：成绩-gt-90，那么：优秀"><a href="#如果：成绩-gt-90，那么：优秀" class="headerlink" title="如果：成绩&gt;=90，那么：优秀"></a>如果：成绩&gt;=90，那么：优秀</h1><h1 id="如果成绩-gt-80且-lt-90-那么：良好"><a href="#如果成绩-gt-80且-lt-90-那么：良好" class="headerlink" title="如果成绩&gt;=80且&lt;90,那么：良好"></a>如果成绩&gt;=80且&lt;90,那么：良好</h1><h1 id="如果成绩-gt-70且-lt-80-那么：普通"><a href="#如果成绩-gt-70且-lt-80-那么：普通" class="headerlink" title="如果成绩&gt;=70且&lt;80,那么：普通"></a>如果成绩&gt;=70且&lt;80,那么：普通</h1><h1 id="其他情况：很差"><a href="#其他情况：很差" class="headerlink" title="其他情况：很差"></a>其他情况：很差</h1><h1 id="score-input-“your-score-“"><a href="#score-input-“your-score-“" class="headerlink" title="score = input(“your score: “)"></a>score = input(“your score: “)</h1><h1 id="score-int-score"><a href="#score-int-score" class="headerlink" title="score = int(score)"></a>score = int(score)</h1><h1 id="if-score-gt-90"><a href="#if-score-gt-90" class="headerlink" title="if score &gt;= 90:"></a>if score &gt;= 90:</h1><h1 id="print-“优秀”"><a href="#print-“优秀”" class="headerlink" title="print(“优秀”)"></a>print(“优秀”)</h1><h1 id="if-10-gt-3"><a href="#if-10-gt-3" class="headerlink" title="if 10 &gt; 3:"></a>if 10 &gt; 3:</h1><h1 id="print-‘ok’-2"><a href="#print-‘ok’-2" class="headerlink" title="print(‘ok’)"></a>print(‘ok’)</h1><h1 id="elif-score-gt-80-and-score-lt-90"><a href="#elif-score-gt-80-and-score-lt-90" class="headerlink" title="elif score &gt;= 80 and score &lt; 90:"></a>elif score &gt;= 80 and score &lt; 90:</h1><h1 id="print-“良好”"><a href="#print-“良好”" class="headerlink" title="print(“良好”)"></a>print(“良好”)</h1><h1 id="elif-score-gt-70-and-score-lt-80"><a href="#elif-score-gt-70-and-score-lt-80" class="headerlink" title="elif score &gt;= 70 and score &lt; 80:"></a>elif score &gt;= 70 and score &lt; 80:</h1><h1 id="print-“普通”"><a href="#print-“普通”" class="headerlink" title="print(“普通”)"></a>print(“普通”)</h1><h1 id="else-1"><a href="#else-1" class="headerlink" title="else:"></a>else:</h1><h1 id="print-‘很差’"><a href="#print-‘很差’" class="headerlink" title="print(‘很差’)"></a>print(‘很差’)</h1><h1 id="优化版"><a href="#优化版" class="headerlink" title="优化版"></a>优化版</h1><h1 id="score-input-“your-score-“-1"><a href="#score-input-“your-score-“-1" class="headerlink" title="score = input(“your score: “)"></a>score = input(“your score: “)</h1><h1 id="score-int-score-1"><a href="#score-int-score-1" class="headerlink" title="score = int(score)"></a>score = int(score)</h1><h1 id="if-score-gt-90-1"><a href="#if-score-gt-90-1" class="headerlink" title="if score &gt;= 90:"></a>if score &gt;= 90:</h1><h1 id="print-“优秀”-1"><a href="#print-“优秀”-1" class="headerlink" title="print(“优秀”)"></a>print(“优秀”)</h1><h1 id="elif-score-gt-80"><a href="#elif-score-gt-80" class="headerlink" title="elif score &gt;= 80:"></a>elif score &gt;= 80:</h1><h1 id="print-“良好”-1"><a href="#print-“良好”-1" class="headerlink" title="print(“良好”)"></a>print(“良好”)</h1><h1 id="elif-score-gt-70"><a href="#elif-score-gt-70" class="headerlink" title="elif score &gt;= 70:"></a>elif score &gt;= 70:</h1><h1 id="print-“普通”-1"><a href="#print-“普通”-1" class="headerlink" title="print(“普通”)"></a>print(“普通”)</h1><h1 id="else-2"><a href="#else-2" class="headerlink" title="else:"></a>else:</h1><h1 id="print-‘很差’-1"><a href="#print-‘很差’-1" class="headerlink" title="print(‘很差’)"></a>print(‘很差’)</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>“””<br>请输入您的用户名<br>请输入您的密码<br>判断 输入的用户名 等于 正确的用户名 并且 输入的密码 等于 正确的密码:<br>    告诉用户登录成功<br>否则:<br>    告诉用户账号密码错误<br>“””<br>inp_name = input(“username: “)<br>inp_pwd = input(“password: “)</p>
<p>if inp_name == “egon” and inp_pwd == “123”:<br>    print(“登录成功”)<br>else:<br>    print(“账号密码错误”)</p>
<h1 id="while-True"><a href="#while-True" class="headerlink" title="while True:"></a>while True:</h1><h1 id="inp-name-input-“username-“"><a href="#inp-name-input-“username-“" class="headerlink" title="inp_name = input(“username: “)"></a>inp_name = input(“username: “)</h1><h1 id="inp-pwd-input-“password-“"><a href="#inp-pwd-input-“password-“" class="headerlink" title="inp_pwd = input(“password: “)"></a>inp_pwd = input(“password: “)</h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="if-inp-name-“egon”-and-inp-pwd-“123”"><a href="#if-inp-name-“egon”-and-inp-pwd-“123”" class="headerlink" title="if inp_name == “egon” and inp_pwd == “123”:"></a>if inp_name == “egon” and inp_pwd == “123”:</h1><h1 id="print-“登录成功”"><a href="#print-“登录成功”" class="headerlink" title="print(“登录成功”)"></a>print(“登录成功”)</h1><h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1><h1 id="else-3"><a href="#else-3" class="headerlink" title="else:"></a>else:</h1><h1 id="print-“账号密码错误”"><a href="#print-“账号密码错误”" class="headerlink" title="print(“账号密码错误”)"></a>print(“账号密码错误”)</h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="print-‘end…’-2"><a href="#print-‘end…’-2" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><p>“””<br>语法<br>while 条件:<br>    代码1<br>    代码2<br>    代码3<br>“””</p>
<h1 id="一-基本使用"><a href="#一-基本使用" class="headerlink" title="一 基本使用"></a>一 基本使用</h1><h1 id="i-0"><a href="#i-0" class="headerlink" title="i=0"></a>i=0</h1><h1 id="while-i-lt-5-5-lt-5"><a href="#while-i-lt-5-5-lt-5" class="headerlink" title="while i &lt; 5: # 5 &lt; 5"></a>while i &lt; 5: # 5 &lt; 5</h1><h1 id="print-i-4"><a href="#print-i-4" class="headerlink" title="print(i) # 4"></a>print(i) # 4</h1><h1 id="i-1-i-5"><a href="#i-1-i-5" class="headerlink" title="i += 1 # i=5"></a>i += 1 # i=5</h1><p>“””<br>0<br>1<br>2<br>3<br>4<br>“””</p>
<h1 id="二-死循环：永远也不结束的循环"><a href="#二-死循环：永远也不结束的循环" class="headerlink" title="二 死循环：永远也不结束的循环"></a>二 死循环：永远也不结束的循环</h1><h1 id="while-True-1"><a href="#while-True-1" class="headerlink" title="while True:"></a>while True:</h1><h1 id="print-‘1111’"><a href="#print-‘1111’" class="headerlink" title="# print(‘1111’)"></a># print(‘1111’)</h1><h1 id="1-1"><a href="#1-1" class="headerlink" title="1+1"></a>1+1</h1><h1 id="三-结束while循环的两种方式"><a href="#三-结束while循环的两种方式" class="headerlink" title="三 结束while循环的两种方式"></a>三 结束while循环的两种方式</h1><h1 id="1、break：直接终止本层循环，不会有下一次循环"><a href="#1、break：直接终止本层循环，不会有下一次循环" class="headerlink" title="1、break：直接终止本层循环，不会有下一次循环"></a>1、break：直接终止本层循环，不会有下一次循环</h1><h1 id="tag-True"><a href="#tag-True" class="headerlink" title="tag = True"></a>tag = True</h1><h1 id="while-tag"><a href="#while-tag" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="print-‘start…’-2"><a href="#print-‘start…’-2" class="headerlink" title="print(‘start…’)"></a>print(‘start…’)</h1><h1 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h1><h1 id="print-‘end…’-3"><a href="#print-‘end…’-3" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="2、条件改为假：不会直接终止本层循环，会在下一次循环时终止"><a href="#2、条件改为假：不会直接终止本层循环，会在下一次循环时终止" class="headerlink" title="2、条件改为假：不会直接终止本层循环，会在下一次循环时终止"></a>2、条件改为假：不会直接终止本层循环，会在下一次循环时终止</h1><h1 id="tag-True-1"><a href="#tag-True-1" class="headerlink" title="tag = True"></a>tag = True</h1><h1 id="while-tag-1"><a href="#while-tag-1" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="print-‘start…’-3"><a href="#print-‘start…’-3" class="headerlink" title="print(‘start…’)"></a>print(‘start…’)</h1><h1 id="tag-False"><a href="#tag-False" class="headerlink" title="tag = False"></a>tag = False</h1><h1 id="print-‘end…’-4"><a href="#print-‘end…’-4" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h1 id="tag-True-2"><a href="#tag-True-2" class="headerlink" title="tag = True"></a>tag = True</h1><h1 id="while-tag-2"><a href="#while-tag-2" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="inp-name-input-“username-“-1"><a href="#inp-name-input-“username-“-1" class="headerlink" title="inp_name = input(“username: “)"></a>inp_name = input(“username: “)</h1><h1 id="inp-pwd-input-“password-“-1"><a href="#inp-pwd-input-“password-“-1" class="headerlink" title="inp_pwd = input(“password: “)"></a>inp_pwd = input(“password: “)</h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="if-inp-name-“egon”-and-inp-pwd-“123”-1"><a href="#if-inp-name-“egon”-and-inp-pwd-“123”-1" class="headerlink" title="if inp_name == “egon” and inp_pwd == “123”:"></a>if inp_name == “egon” and inp_pwd == “123”:</h1><h1 id="print-“登录成功”-1"><a href="#print-“登录成功”-1" class="headerlink" title="print(“登录成功”)"></a>print(“登录成功”)</h1><h1 id="break-2"><a href="#break-2" class="headerlink" title="# break"></a># break</h1><h1 id="tag-False-1"><a href="#tag-False-1" class="headerlink" title="tag = False"></a>tag = False</h1><h1 id="else-4"><a href="#else-4" class="headerlink" title="else:"></a>else:</h1><h1 id="print-“账号密码错误”-1"><a href="#print-“账号密码错误”-1" class="headerlink" title="print(“账号密码错误”)"></a>print(“账号密码错误”)</h1><h1 id="print-‘xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx’"><a href="#print-‘xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx’" class="headerlink" title="print(‘xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx’)"></a>print(‘xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx’)</h1><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h1 id="print-‘end…’-5"><a href="#print-‘end…’-5" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="while-True-2"><a href="#while-True-2" class="headerlink" title="while True:"></a>while True:</h1><h1 id="while-True-3"><a href="#while-True-3" class="headerlink" title="while True:"></a>while True:</h1><h1 id="while-True-4"><a href="#while-True-4" class="headerlink" title="while True:"></a>while True:</h1><h1 id="break-3"><a href="#break-3" class="headerlink" title="break"></a>break</h1><h1 id="break-4"><a href="#break-4" class="headerlink" title="break"></a>break</h1><h1 id="break-5"><a href="#break-5" class="headerlink" title="break"></a>break</h1><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><h1 id="tag-True-3"><a href="#tag-True-3" class="headerlink" title="tag = True"></a>tag = True</h1><h1 id="while-tag-3"><a href="#while-tag-3" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="while-tag-4"><a href="#while-tag-4" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="while-tag-5"><a href="#while-tag-5" class="headerlink" title="while tag:"></a>while tag:</h1><h1 id="tag-False-2"><a href="#tag-False-2" class="headerlink" title="tag=False"></a>tag=False</h1><h1 id="四：while-continue：终止本次循环，直接进入下一次"><a href="#四：while-continue：终止本次循环，直接进入下一次" class="headerlink" title="四：while+continue：终止本次循环，直接进入下一次"></a>四：while+continue：终止本次循环，直接进入下一次</h1><h1 id="i-0-1"><a href="#i-0-1" class="headerlink" title="i = 0"></a>i = 0</h1><h1 id="while-i-lt-5"><a href="#while-i-lt-5" class="headerlink" title="while i &lt; 5:"></a>while i &lt; 5:</h1><h1 id="if-i-3"><a href="#if-i-3" class="headerlink" title="if i == 3:"></a>if i == 3:</h1><h1 id="i-1"><a href="#i-1" class="headerlink" title="i+=1"></a>i+=1</h1><h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><h1 id="print-i"><a href="#print-i" class="headerlink" title="print(i)"></a>print(i)</h1><h1 id="i-1-i-3"><a href="#i-1-i-3" class="headerlink" title="i+=1  # i=3"></a>i+=1  # i=3</h1><h1 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h1><h1 id="while-True-5"><a href="#while-True-5" class="headerlink" title="while True:"></a>while True:</h1><h1 id="inp-name-input-“username-“-2"><a href="#inp-name-input-“username-“-2" class="headerlink" title="inp_name = input(“username: “)"></a>inp_name = input(“username: “)</h1><h1 id="inp-pwd-input-“password-“-2"><a href="#inp-pwd-input-“password-“-2" class="headerlink" title="inp_pwd = input(“password: “)"></a>inp_pwd = input(“password: “)</h1><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><h1 id="if-inp-name-“egon”-and-inp-pwd-“123”-2"><a href="#if-inp-name-“egon”-and-inp-pwd-“123”-2" class="headerlink" title="if inp_name == “egon” and inp_pwd == “123”:"></a>if inp_name == “egon” and inp_pwd == “123”:</h1><h1 id="print-“登录成功”-2"><a href="#print-“登录成功”-2" class="headerlink" title="print(“登录成功”)"></a>print(“登录成功”)</h1><h1 id="break-6"><a href="#break-6" class="headerlink" title="break"></a>break</h1><h1 id="else-5"><a href="#else-5" class="headerlink" title="else:"></a>else:</h1><h1 id="print-“账号密码错误”-2"><a href="#print-“账号密码错误”-2" class="headerlink" title="print(“账号密码错误”)"></a>print(“账号密码错误”)</h1><h1 id="continue-画蛇添足"><a href="#continue-画蛇添足" class="headerlink" title="# continue  # 画蛇添足"></a># continue  # 画蛇添足</h1><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><h1 id="print-‘end…’-6"><a href="#print-‘end…’-6" class="headerlink" title="print(‘end…’)"></a>print(‘end…’)</h1><h1 id="五-while-else"><a href="#五-while-else" class="headerlink" title="五 while+else"></a>五 while+else</h1><p>i = 0<br>while i &lt; 5:<br>    if i == 3:<br>        # i+=1<br>        # continue<br>        break<br>    print(i)<br>    i+=1<br>else:<br>    print(‘xxxxxxxxxxxxxxxx’)</p>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day05</title>
    <url>/2021/03/18/day05/</url>
    <content><![CDATA[<p>用户登录案例</p>
<span id="more"></span>
<h2 id="用户登录案例"><a href="#用户登录案例" class="headerlink" title="用户登录案例"></a>用户登录案例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;please input  your name: &#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;please input  your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;please input  your name: &#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;please input  your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;输错次数达到了限制&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;please input  your name: &#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;please input  your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输错次数达到了限制&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">案例<span class="number">4</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">3</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;please input  your name: &#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;please input  your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)  <span class="comment"># 3</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输错次数达到了限制&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例5</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp_name = <span class="built_in">input</span>(<span class="string">&#x27;please input  your name: &#x27;</span>)</span><br><span class="line">    inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;please input  your password: &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> inp_name == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;login successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            0 退出</span></span><br><span class="line"><span class="string">            1 取款</span></span><br><span class="line"><span class="string">            2 存款</span></span><br><span class="line"><span class="string">            3 转账</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>)</span><br><span class="line">            choice = <span class="built_in">input</span>(<span class="string">&quot;请输入命令编号： &quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;============正在取款============&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;============正在存款============&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> choice == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;============正在转账============&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;============输入错误============&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username or password error&#x27;</span>)</span><br><span class="line">        count +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输错次数达到了限制&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ll = [[<span class="number">111</span>,<span class="number">222</span>],[<span class="number">333</span>,<span class="number">444</span>],[<span class="number">555</span>,<span class="number">6666</span>]]</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> ll:  <span class="comment"># x,y=[111,222]</span></span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1、for + break</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">111</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">444</span>,<span class="number">555</span>]:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">33</span>:</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、for + continue</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">111</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">444</span>,<span class="number">555</span>]:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">33</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、for + else</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">111</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">444</span>,<span class="number">555</span>]:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">33</span>:</span><br><span class="line">        <span class="comment"># break</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;xxxxxxxxxxxxxxx&#x27;</span>)<span class="comment">#for循环执行失败，则执行此段代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、for+range</span></span><br><span class="line">ll =  [<span class="number">111</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ll)):</span><br><span class="line">    <span class="built_in">print</span>(ll[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、for+enumerate</span></span><br><span class="line">ll =  [<span class="number">111</span>,<span class="number">222</span>,<span class="number">33</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(ll):  <span class="comment"># i,v=(0, 111)</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、for循环嵌套</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):  <span class="comment"># i=2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=================&gt;外层循环&#x27;</span>, i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;内层循环&quot;</span>, j)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">=================&gt;外层循环 0</span></span><br><span class="line"><span class="string">内层循环 0</span></span><br><span class="line"><span class="string">内层循环 1</span></span><br><span class="line"><span class="string">内层循环 2</span></span><br><span class="line"><span class="string">内层循环 3</span></span><br><span class="line"><span class="string">内层循环 4</span></span><br><span class="line"><span class="string">=================&gt;外层循环 1</span></span><br><span class="line"><span class="string">内层循环 0</span></span><br><span class="line"><span class="string">内层循环 1</span></span><br><span class="line"><span class="string">内层循环 2</span></span><br><span class="line"><span class="string">内层循环 3</span></span><br><span class="line"><span class="string">内层循环 4</span></span><br><span class="line"><span class="string">=================&gt;外层循环 2</span></span><br><span class="line"><span class="string">内层循环 0</span></span><br><span class="line"><span class="string">内层循环 1</span></span><br><span class="line"><span class="string">内层循环 2</span></span><br><span class="line"><span class="string">内层循环 3</span></span><br><span class="line"><span class="string">内层循环 4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>可变类型：</strong>值改变了，id不变，证明就是在改变原值，原值是可变类型<br><strong>不可变类型：</strong>值改变了，id也跟着变，证明就是在产生了新的值，原值是不可变类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line">x = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line"><span class="comment">#两个id不一样，所以数字是不可变类型</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">111</span>,<span class="number">222</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line">x[<span class="number">0</span>]=<span class="number">666666</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#两次id一样，所以列表是可变类型</span></span><br></pre></td></tr></table></figure>
<h3 id="int基本使用"><a href="#int基本使用" class="headerlink" title="int基本使用"></a>int基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用途</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义方式</span><br><span class="line">age = <span class="number">18</span>  <span class="comment"># age = int(18)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(age))</span><br><span class="line"></span><br><span class="line"><span class="number">2.1</span> 数据类型转换</span><br><span class="line">res=<span class="built_in">int</span>(<span class="string">&quot;   18     &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&quot;aadfsadf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&quot;10&quot;</span>) + <span class="number">11</span></span><br><span class="line"><span class="string">&quot;10&quot;</span> + <span class="number">11</span></span><br><span class="line">python一种解释型、强类型、动态类型</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用操作+内置的方法</span><br><span class="line">算术运算、比较运算</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + <span class="number">3.3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> &gt; <span class="number">3.3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：int只能存一个值，是不可变类型</p>
<h3 id="float基本使用"><a href="#float基本使用" class="headerlink" title="float基本使用"></a>float基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用途</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义方式</span><br><span class="line">sal = <span class="number">18.3</span>  <span class="comment"># sal = float(18.3)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(sal))</span><br><span class="line"></span><br><span class="line"><span class="number">2.1</span> 数据类型转换</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&quot;3.3&quot;</span>)</span><br><span class="line">res=<span class="built_in">float</span>(<span class="string">&quot;3.3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用操作+内置的方法</span><br><span class="line">算术运算、比较运算</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> + <span class="number">3.3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> &gt; <span class="number">3.3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：只能存一个值，是不可变类型</p>
<h2 id="复数（了解）"><a href="#复数（了解）" class="headerlink" title="复数（了解）"></a>复数（了解）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>-<span class="number">2j</span></span><br><span class="line"><span class="built_in">print</span>(x.real)</span><br><span class="line"><span class="built_in">print</span>(x.imag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">11</span>))</span><br></pre></td></tr></table></figure>
<h2 id="str基本使用"><a href="#str基本使用" class="headerlink" title="str基本使用"></a>str基本使用</h2><p><a href="https://www.runoob.com/python3/python3-string.html">菜鸟教程</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、用途：用于记录描述性质的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、定义方式：在&quot;&quot;,&#x27;&#x27;,&quot;&quot;&quot; &quot;&quot;&quot;,&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;内包含一串字符</span></span><br><span class="line"><span class="comment"># msg = &quot;18&quot;  # msg=str(&quot;18&quot;)</span></span><br><span class="line"><span class="comment"># print(type(msg))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据类型转换:可以把任意类型转成str类型</span></span><br><span class="line"><span class="comment"># res=str([1,2,3])</span></span><br><span class="line"><span class="comment"># print(res,type(res))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、常用操作+内置的方法</span></span><br><span class="line"><span class="comment">#优先掌握的操作：</span></span><br><span class="line"><span class="comment">#1、按索引取值(正向取+反向取) ：只能取</span></span><br><span class="line">msg = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># print(msg[0])</span></span><br><span class="line"><span class="comment"># print(msg[-1])</span></span><br><span class="line"><span class="comment"># print(msg)</span></span><br><span class="line"><span class="comment"># msg[0] = &quot;H&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、切片(顾头不顾尾，步长)</span></span><br><span class="line">msg = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(msg[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># 0 2 4</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg[:])  <span class="comment"># 完整拷贝字符串</span></span><br><span class="line"><span class="built_in">print</span>(msg[-<span class="number">1</span>:-<span class="number">4</span>:-<span class="number">1</span>]) </span><br><span class="line"><span class="built_in">print</span>(msg[-<span class="number">2</span>::-<span class="number">1</span>]) <span class="comment"># 最后一个-1代表从索引为-2的字符,向左取值,步长为1</span></span><br><span class="line">结果为：lrow olleh</span><br><span class="line"><span class="built_in">print</span>(msg[:-<span class="number">2</span>:-<span class="number">1</span>]) <span class="comment"># 最后一个-1代表从末尾向左取值,取到索引为-2值停止,步长为1</span></span><br><span class="line">结果为：d</span><br><span class="line"><span class="built_in">print</span>(msg[::-<span class="number">1</span>])  <span class="comment"># 将字符串倒过来</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、长度len</span></span><br><span class="line">msg = <span class="string">&quot;h 你&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(msg))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、成员运算<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">msg = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># print(&quot;wo&quot; in msg)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="string">&quot;wx&quot;</span> <span class="keyword">in</span> msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;wx&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、移除空白strip</span></span><br><span class="line">msg = <span class="string">&quot;   hello    &quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">res=msg.strip()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&quot;***hello******&quot;</span></span><br><span class="line">msg = <span class="string">&quot;**+-/?*h*-ello**?-**&amp;^**&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.strip(<span class="string">&quot;^&amp;*+-/?&quot;</span>))</span><br><span class="line"></span><br><span class="line">inp_user = <span class="built_in">input</span>(<span class="string">&quot;username: &quot;</span>).strip()  <span class="comment"># inp_user = &quot;egon    &quot;</span></span><br><span class="line">inp_pwd = <span class="built_in">input</span>(<span class="string">&quot;password: &quot;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> inp_user == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、切分split</span></span><br><span class="line">msg = <span class="string">&quot;egon:18:male&quot;</span></span><br><span class="line">res = msg.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">res = msg.split(<span class="string">&quot;:&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">info = [<span class="string">&quot;egon&quot;</span>,<span class="number">18</span>,<span class="string">&quot;male&quot;</span>]</span><br><span class="line">res1 = <span class="string">&quot;%s:%s:%s&quot;</span> %(info[<span class="number">0</span>],info[<span class="number">1</span>],info[<span class="number">2</span>])</span><br><span class="line">res1 = <span class="string">&quot;:&quot;</span>.join(info)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7、循环</span></span><br><span class="line">msg = <span class="string">&quot;egon:18:male&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>:存一个值,有序,不可变</p>
<p>可变or不可变（1、可变：值变，id不变。可变==不可hash 2、不可变：值变，id就变。不可变==可hash）</p>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>da06</title>
    <url>/2021/03/21/day06/</url>
    <content><![CDATA[<p>字符串操作</p>
<span id="more"></span>
<h2 id="字符串需要掌握的操作（-）"><a href="#字符串需要掌握的操作（-）" class="headerlink" title="字符串需要掌握的操作（****）"></a>字符串需要掌握的操作（****）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、strip,lstrip,rstrip</span><br><span class="line">msg = <span class="string">&quot;****hello****&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.strip(<span class="string">&quot;*&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.lstrip(<span class="string">&quot;*&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rstrip(<span class="string">&quot;*&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、lower,upper</span><br><span class="line">msg = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.upper())</span><br><span class="line"><span class="built_in">print</span>(msg.lower())</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、startswith,endswith</span><br><span class="line">msg = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.startswith(<span class="string">&quot;he&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.endswith(<span class="string">&quot;ld&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、<span class="built_in">format</span>的三种玩法</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is %s my age is %s&quot;</span> %(<span class="string">&quot;egon&quot;</span>,<span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is &#123;x&#125; my age is &#123;y&#125;&quot;</span>.<span class="built_in">format</span>(y=<span class="number">18</span>,x=<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125; my age is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">18</span>,<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is my age is &#123;0&#125;&#123;0&#125;&#123;1&#125;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">18</span>,<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=<span class="number">111</span></span><br><span class="line">y=<span class="number">222</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;my name is <span class="subst">&#123;x&#125;</span> my age is <span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、split,rsplit</span><br><span class="line">msg=<span class="string">&quot;x:y:z:a:b&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.split(<span class="string">&quot;:&quot;</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rsplit(<span class="string">&quot;:&quot;</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">结果为：</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y:z:a:b&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;x:y:z:a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、join</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;:&quot;</span>.join([<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、replace</span><br><span class="line">msg = <span class="string">&quot;xx egon is hhha egon xxx egon&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.replace(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;EGON&#x27;</span>))</span><br><span class="line">结果为：</span><br><span class="line">xx EGON <span class="keyword">is</span> hhha EGON xxx EGON</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.replace(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;EGON&#x27;</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、isdigit <span class="comment">#判断字符串是否只包含数字</span></span><br><span class="line">msg = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.isdigit())</span><br><span class="line"></span><br><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;your age&gt;&gt;&gt;: &quot;</span>).strip()</span><br><span class="line"><span class="keyword">if</span> age.isdigit():</span><br><span class="line">    age = <span class="built_in">int</span>(age)</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;小垃圾必须输入数字&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="需要了解的方法"><a href="#需要了解的方法" class="headerlink" title="需要了解的方法"></a>需要了解的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、find,rfind,index,rindex,count</span><br><span class="line">msg = <span class="string">&quot;hello egon xxx egon yyy egon zzz&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">&quot;egon&quot;</span>,<span class="number">0</span>,<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rfind(<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.rindex(<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.find(<span class="string">&quot;abcde&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(msg.index(<span class="string">&quot;abcde&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.count(<span class="string">&quot;egon&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、center,ljust,rjust,zfill</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;egon&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;egon&#x27;</span>.ljust(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;egon&#x27;</span>.rjust(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;egon&#x27;</span>.zfill(<span class="number">50</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;egon&#x27;</span>.rjust(<span class="number">50</span>,<span class="string">&quot;0&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、captalize,swapcase,title</span><br><span class="line">msg = <span class="string">&quot;hellO woRld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(msg.capitalize())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(msg.swapcase())</span><br><span class="line"><span class="built_in">print</span>(msg.title())</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、is数字系列</span></span><br><span class="line">num1=<span class="string">b&#x27;4&#x27;</span> <span class="comment">#bytes</span></span><br><span class="line">num2=<span class="string">&#x27;4&#x27;</span>  <span class="comment"># 阿拉伯数字</span></span><br><span class="line">num3=<span class="string">&#x27;四&#x27;</span> <span class="comment">#中文数字</span></span><br><span class="line">num4=<span class="string">&#x27;Ⅳ&#x27;</span> <span class="comment">#罗马数字</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、变量值是字节串或字符串类型并且包含的阿拉伯数字，isdigit()结果才为真</span><br><span class="line"><span class="built_in">print</span>(num1.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num2.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num3.isdigit())</span><br><span class="line"><span class="built_in">print</span>(num4.isdigit())</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、变量值是字符串类型并且包含的阿拉伯数字，isdecimal()结果才为真</span><br><span class="line"><span class="built_in">print</span>(num2.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(num3.isdecimal())</span><br><span class="line"><span class="built_in">print</span>(num4.isdecimal())</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、变量值是字符串类型并且包含的阿拉伯数字\中文数字\罗马数字，isdecimal()结果才为真</span><br><span class="line"><span class="built_in">print</span>(num2.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(num3.isnumeric())</span><br><span class="line"><span class="built_in">print</span>(num4.isnumeric())</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="keyword">is</span>其他</span><br><span class="line">name=<span class="string">&#x27;egon123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.isalnum()) <span class="comment">#字符串由字母或数字组成</span></span><br><span class="line"><span class="built_in">print</span>(name.isalpha()) <span class="comment">#字符串只由字母组成</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name.islower())</span><br><span class="line"><span class="built_in">print</span>(name.isupper())</span><br><span class="line"></span><br><span class="line">name=<span class="string">&quot;     &quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.isspace())</span><br><span class="line"></span><br><span class="line">name =<span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.istitle())</span><br></pre></td></tr></table></figure>
<h3 id="该类型总结"><a href="#该类型总结" class="headerlink" title="该类型总结"></a>该类型总结</h3><ul>
<li>存一个值 </li>
<li>有序</li>
<li>不可变<h2 id="list基本使用"><a href="#list基本使用" class="headerlink" title="list基本使用"></a>list基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用途：按位置存放多个值</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义方式：在[]内用逗号分割开多个任意类型的元素</span><br><span class="line">l = [<span class="number">11</span>,<span class="number">3.3</span>,<span class="string">&quot;xx&quot;</span>,[<span class="number">1111</span>,<span class="number">2222</span>]]  <span class="comment"># l = list(。。。)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(l))</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>数据类型转换: 所有可以被<span class="keyword">for</span>循环遍历的类型都可以传给<span class="built_in">list</span>然后转换成列表</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">111</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">222</span>&#125;))</span><br><span class="line"></span><br><span class="line">res=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用操作+内置的方法</span><br><span class="line">优先掌握的操作：</span><br><span class="line"><span class="number">1</span>、按索引存取值(正向存取+反向存取)：即可存也可以取</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br><span class="line">list1[<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1))</span><br><span class="line"></span><br><span class="line">list1[<span class="number">5</span>] = <span class="number">777</span>  <span class="comment"># 不可以用不存在的索引赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、切片(顾头不顾尾，步长)</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">l=list1[:]  <span class="comment"># 浅拷贝</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、长度</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(list1))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、成员运算<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">222</span> <span class="keyword">in</span> list1)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、追加</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">list1.append(<span class="number">666</span>)</span><br><span class="line">x = list1.append(<span class="number">777</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">list1.insert(<span class="number">2</span>,<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、删除</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">(<span class="number">1</span>) 单纯的删除-》没有返回值</span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">res=list1.remove(<span class="number">333</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）取走-》有返回值</span><br><span class="line">res=list1.pop(<span class="number">1</span>)  <span class="comment">#1代表索引</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">结果：</span><br><span class="line"><span class="number">222</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、循环</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">========================需要掌握的操作</span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line"><span class="built_in">print</span>(list1.count(<span class="number">333</span>))</span><br><span class="line"></span><br><span class="line">list1= [<span class="number">99</span>,<span class="number">33</span>,<span class="number">22</span>,<span class="number">11</span>,-<span class="number">3</span>,<span class="number">87</span>]</span><br><span class="line">list1.reverse()</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">list1.clear()</span><br><span class="line">list1.append([<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>]:</span><br><span class="line">    list1.append(x)</span><br><span class="line">list1.extend([<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">浅copy</span><br><span class="line">list1.copy()</span><br><span class="line">list1[:]</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">res=list1.index(<span class="number">333</span>,<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line">queue = []</span><br><span class="line"></span><br><span class="line">queue.append(<span class="string">&#x27;one&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;two&#x27;</span>)</span><br><span class="line">queue.append(<span class="string">&#x27;three&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(queue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue.pop(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(queue.pop(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(queue.pop(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="该类型总结-1"><a href="#该类型总结-1" class="headerlink" title="该类型总结"></a>该类型总结</h3></li>
<li>存多个值</li>
<li>有序</li>
<li>可变<h2 id="tuple基本使用"><a href="#tuple基本使用" class="headerlink" title="tuple基本使用"></a>tuple基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、用途：</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、定义方式：在()内用逗号分隔开多个任意类型的元素</span><br><span class="line">x = (<span class="number">10</span>,)  <span class="comment">#  x= tuple(...)</span></span><br><span class="line"><span class="built_in">print</span>(x,<span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span>数据类型转换：任意能够被<span class="keyword">for</span>循环遍历的类型都可以交给<span class="built_in">tuple</span>转成元组</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用操作+内置的方法</span><br><span class="line">优先掌握的操作：</span><br><span class="line"><span class="number">1</span>、按索引取值(正向取+反向取)：只能取</span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br><span class="line">t[<span class="number">0</span>]=<span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、切片(顾头不顾尾，步长)</span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、长度</span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、成员运算<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line"><span class="built_in">print</span>([<span class="number">44</span>,<span class="number">555</span>] <span class="keyword">in</span> t)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、循环</span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> t:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">需要掌握的操作：</span><br><span class="line">t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,[<span class="number">44</span>,<span class="number">555</span>])</span><br><span class="line">t.index()</span><br><span class="line">t.count()</span><br></pre></td></tr></table></figure>
<h3 id="该类型总结-2"><a href="#该类型总结-2" class="headerlink" title="该类型总结"></a>该类型总结</h3></li>
<li>存多个值</li>
<li>有序</li>
<li>不可变<h2 id="dict基本使用"><a href="#dict基本使用" class="headerlink" title="dict基本使用"></a>dict基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、用途</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、定义方式：在&#123;&#125;内用逗号分隔开多个元素，每个元素都是key:value的格式，其中value可以是任意类型而key必须是不可变类型，通常是str类型，而且key不能重复</span></span><br><span class="line">dic = &#123;<span class="number">111</span>:<span class="number">6666</span>,<span class="string">&quot;k1&quot;</span>:<span class="number">777</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">8888</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]:<span class="number">3333</span>&#125;   <span class="comment"># dic = dict(...)</span></span><br><span class="line">dic = &#123;<span class="number">111</span>:<span class="number">6666</span>,<span class="string">&quot;k1&quot;</span>:<span class="number">777</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):<span class="number">8888</span>,<span class="string">&quot;k1&quot;</span>:<span class="number">99999999</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="built_in">print</span>(dic[(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>数据类型转换</span><br><span class="line">info = [(<span class="string">&#x27;k1&#x27;</span>,<span class="number">111</span>),(<span class="string">&#x27;k2&#x27;</span>,<span class="number">222</span>),(<span class="string">&#x27;k3&#x27;</span>,<span class="number">3333</span>)]</span><br><span class="line">dic=<span class="built_in">dict</span>(info)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常用操作+内置的方法</span><br><span class="line">优先掌握的操作：</span><br><span class="line"><span class="number">1</span>、按key存取值：可存可取</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;egon&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">dic[<span class="string">&#x27;gender&#x27;</span>] = <span class="string">&quot;male&quot;</span></span><br><span class="line">dic[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、长度<span class="built_in">len</span></span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;egon&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dic))</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、成员运算<span class="keyword">in</span>和<span class="keyword">not</span> <span class="keyword">in</span>: 以key为准</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;egon&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> dic)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、删除</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">单纯的删除</span><br><span class="line"><span class="keyword">del</span> dic[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">取走</span><br><span class="line">v=dic.pop(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line">结果：</span><br><span class="line">egon</span><br><span class="line"></span><br><span class="line">v = dic.popitem()</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line">结果:</span><br><span class="line">(<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、键keys()，值values()，键值对items()</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.keys()</span><br><span class="line">[<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.values()</span><br><span class="line">[<span class="number">18</span>, <span class="string">&#x27;egon&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic.items()</span><br><span class="line">[(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>), (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;egon&#x27;</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、循环</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic.keys():</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dic.values():</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、get()</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&#x27;namexxxx&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="string">&quot;namexxxx&quot;</span>))</span><br><span class="line"></span><br><span class="line">需要掌握的操作</span><br><span class="line">dic = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">dic.update(&#123;<span class="string">&#x27;gender&#x27;</span>:<span class="string">&quot;male&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;egon&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;.fromkeys([<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;gender&quot;</span>],[])</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&#x27;name&#x27;</span>: [], <span class="string">&#x27;age&#x27;</span>: [], <span class="string">&#x27;gender&#x27;</span>: []&#125;</span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;name&#x27;</span>].append(<span class="number">1111</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(dic)</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: [<span class="number">1111</span>], <span class="string">&#x27;age&#x27;</span>: [<span class="number">1111</span>], <span class="string">&#x27;gender&#x27;</span>: [<span class="number">1111</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;.fromkeys([<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;gender&quot;</span>],<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#Python 字典 fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值。</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;</span><br><span class="line">v = dic.setdefault(<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">v2 = dic.setdefault(<span class="string">&#x27;age&#x27;</span>,<span class="number">19</span>)</span><br><span class="line"><span class="comment">#Python 字典 setdefault() 函数和 get()方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。如果存在,则不作修格斯</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xxx&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line">xxx</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="该类型总结-3"><a href="#该类型总结-3" class="headerlink" title="该类型总结"></a>该类型总结</h3><ul>
<li>1、可以存多个值</li>
<li>2、是无序</li>
<li>3、是可变类型</li>
</ul>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day07</title>
    <url>/2021/03/22/day07/</url>
    <content><![CDATA[<p>深浅拷贝</p>
<span id="more"></span>
<h2 id="深浅拷贝原理"><a href="#深浅拷贝原理" class="headerlink" title="深浅拷贝原理"></a>深浅拷贝原理</h2><ul>
<li><strong>浅拷贝(copy)：</strong>拷贝父对象，不会拷贝对象的内部的子对象。</li>
<li><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</li>
</ul>
<p><a href="https://www.runoob.com/w3cnote/python-understanding-dict-copy-shallow-or-deep.html">菜鸟教程</a></p>
<h2 id="1、浅拷贝"><a href="#1、浅拷贝" class="headerlink" title="1、浅拷贝"></a>1、浅拷贝</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="number">111</span>,<span class="number">222</span>,[<span class="number">333</span>,<span class="number">444</span>]]</span><br><span class="line">l2 = l1.copy()</span><br><span class="line"><span class="comment"># l3 = l1[:]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l1[<span class="number">0</span>]),<span class="built_in">id</span>(l1[<span class="number">1</span>]),<span class="built_in">id</span>(l1[<span class="number">2</span>]))</span><br><span class="line">&gt;&gt;&gt;<span class="number">4363032704</span> <span class="number">4363036256</span> <span class="number">4366729856</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l2[<span class="number">0</span>]),<span class="built_in">id</span>(l2[<span class="number">1</span>]),<span class="built_in">id</span>(l2[<span class="number">2</span>]))</span><br><span class="line">&gt;&gt;&gt;<span class="number">4363032704</span> <span class="number">4363036256</span> <span class="number">4366729856</span></span><br><span class="line"></span><br><span class="line">l1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">666</span>, <span class="number">444</span>]]</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">666</span>, <span class="number">444</span>]]</span><br><span class="line"></span><br><span class="line">l1[<span class="number">0</span>] = <span class="number">777</span></span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">777</span>, <span class="number">222</span>, [<span class="number">333</span>, <span class="number">444</span>]]</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line">&gt;&gt;&gt;[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">333</span>, <span class="number">444</span>]]</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、浅深copy"><a href="#2、浅深copy" class="headerlink" title="2、浅深copy"></a>2、浅深copy</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">111</span>,<span class="number">222</span>,[<span class="number">333</span>,<span class="number">444</span>]]</span><br><span class="line">l2 = deepcopy(l1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l1[<span class="number">0</span>]),<span class="built_in">id</span>(l1[<span class="number">1</span>]),<span class="built_in">id</span>(l1[<span class="number">2</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4462676096</span> <span class="number">4462679648</span> <span class="number">4466381888</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(l2[<span class="number">0</span>]),<span class="built_in">id</span>(l2[<span class="number">1</span>]),<span class="built_in">id</span>(l2[<span class="number">2</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4462676096</span> <span class="number">4462679648</span> <span class="number">4466382208</span></span><br><span class="line"></span><br><span class="line">l1[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">666</span></span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">666</span>, <span class="number">444</span>]]</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">333</span>, <span class="number">444</span>]]</span><br><span class="line"></span><br><span class="line">l1[<span class="number">0</span>] = <span class="number">777</span></span><br><span class="line"><span class="built_in">print</span>(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">777</span>, <span class="number">222</span>, [<span class="number">333</span>, <span class="number">444</span>]]</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">111</span>, <span class="number">222</span>, [<span class="number">333</span>, <span class="number">444</span>]]</span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day08</title>
    <url>/2021/03/23/day08/</url>
    <content><![CDATA[<p>文件操作</p>
<span id="more"></span>
<h2 id="三问"><a href="#三问" class="headerlink" title="三问"></a>三问</h2><h3 id="1、什么是文件"><a href="#1、什么是文件" class="headerlink" title="1、什么是文件"></a>1、什么是文件</h3><p>文件是操作系统提供给用户或者应用程序的一种操作硬盘的机制/功能</p>
<h3 id="2、为何要用文件"><a href="#2、为何要用文件" class="headerlink" title="2、为何要用文件"></a>2、为何要用文件</h3><p>应用程序———–》遥控器<br>操作系统———–》文件<br>计算机硬件———-》硬盘</p>
<h3 id="3、如何用文件"><a href="#3、如何用文件" class="headerlink" title="3、如何用文件"></a>3、如何用文件</h3><p>文件操作的基本流程：<br>1、应用程序打开文件，拿到一个文件对象/文件句柄<br>2、调用文件句柄下的读、写操作<br>3、关闭文件，回收操作系统资源</p>
<h2 id="一-文件操作的基本流程"><a href="#一-文件操作的基本流程" class="headerlink" title="一 文件操作的基本流程"></a>一 文件操作的基本流程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f = open(&#x27;D:/python17期/day08/代码/aaa/a.txt&#x27;,mode=&#x27;rt&#x27;,encoding=&quot;utf-8&quot;)  # windows默认：gbk</span></span><br><span class="line"><span class="comment"># # print(f)</span></span><br><span class="line"><span class="comment"># res = f.read()</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># f.close()</span></span><br><span class="line"><span class="comment"># # print(f)</span></span><br><span class="line"><span class="comment"># # f.read()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># del f</span></span><br></pre></td></tr></table></figure>

<h2 id="二-上下文管理"><a href="#二-上下文管理" class="headerlink" title="二 上下文管理"></a>二 上下文管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># with open(&#x27;aaa/a.txt&#x27;,mode=&#x27;rt&#x27;,encoding=&quot;utf-8&quot;) as f,\</span></span><br><span class="line"><span class="comment">#         open(...) as f1,\</span></span><br><span class="line"><span class="comment">#         open(...) as f2:</span></span><br><span class="line"><span class="comment">#     f.read()</span></span><br><span class="line"><span class="comment">#     f1.read()</span></span><br><span class="line"><span class="comment">#     f2.read()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;aaa/a.txt&#x27;,mode=&#x27;rt&#x27;,encoding=&quot;utf-8&quot;) as f:</span></span><br><span class="line"><span class="comment">#     print(f.read())</span></span><br></pre></td></tr></table></figure>
<h2 id="文件的mode"><a href="#文件的mode" class="headerlink" title="文件的mode"></a>文件的mode</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 控制文件读写操作的模式</span><br><span class="line">#     r（默认的）</span><br><span class="line">#     w</span><br><span class="line">#     a</span><br><span class="line"># 控制文件读写内容的模式</span><br><span class="line">#     t（默认的）：无论读写都是以字符串为单位的，必须要指定encoding参数---&gt;只能用于文件文件的处理</span><br><span class="line">#     b：无论读写都是以二进制位(bytes类型)单位的，一定不能指定encoding参数---》可以用于所有文件的处理</span><br></pre></td></tr></table></figure>
<ul>
<li><p>1、r：只读模式，文件不存在则报错，文件存在文件指针则跳到文件开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;aaa&#x2F;a.txt&#39;,mode&#x3D;&#39;rt&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">     print(f.read())</span><br></pre></td></tr></table></figure></li>
<li><p>2、w：只写模式，文件不存在则创建空文档文件指针处于文件开头，文件存在则清空文件指针处于文件开头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;aaa&#x2F;a.txt&#39;,mode&#x3D;&#39;wt&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">		 f.write(&quot;你好\n&quot;)</span><br><span class="line">     f.write(&quot;哈哈哈\n&quot;)</span><br><span class="line">     f.write(&quot;我擦嘞\n&quot;)</span><br><span class="line">		 f.write(&quot;撒打发士大夫&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>3、a：只追加写模式，文件不存在则创建空文档文件指针处于文件末尾，文件存在则指针处于文件末尾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;aaa&#x2F;a.txt&#39;,mode&#x3D;&#39;at&#39;,encoding&#x3D;&quot;utf-8&quot;) as f:</span><br><span class="line">		 f.write(&quot;你好1\n&quot;)</span><br><span class="line">		 f.write(&quot;你好2\n&quot;)</span><br><span class="line">		 f.write(&quot;你好3\n&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>4、b模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa/1.mp4&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	   res = f.read()</span><br><span class="line">     <span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line">	   <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">		     <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa/a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     res = f.read()</span><br><span class="line">     <span class="comment"># print(res,type(res))</span></span><br><span class="line"></span><br><span class="line">     t = res.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">     <span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa/a.txt&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.write(<span class="string">&quot;你好&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;aaa/1.mp4&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> src_f,<span class="built_in">open</span>(<span class="string">&#x27;D:/1111111.mp4&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dst_f:</span><br><span class="line">     <span class="comment"># dst_f.write(src_f.read())</span></span><br><span class="line">     <span class="keyword">for</span> line <span class="keyword">in</span> src_f:</span><br><span class="line">         dst_f.write(line)</span><br><span class="line">r+t</span><br><span class="line">w+t</span><br><span class="line">a+t</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day09</title>
    <url>/2021/03/24/day09/</url>
    <content><![CDATA[<p>字符编码、文件修改</p>
<span id="more"></span>
<h2 id="1-字符编码"><a href="#1-字符编码" class="headerlink" title="1 字符编码"></a>1 字符编码</h2><h3 id="1-1常用字符编码"><a href="#1-1常用字符编码" class="headerlink" title="1.1常用字符编码"></a>1.1常用字符编码</h3><ul>
<li><p>ASCII: 只认识英文字符,1个字节表示 最多表示256个字符</p>
</li>
<li><p>GBK: 支持英文字符和中文字符,2字节表示中文字符，1字符表示英文字符</p>
</li>
<li><p>unicode: 支持万国字符,2个字节表示 生僻字需要用4个字节</p>
<p>​    <strong>历史使命</strong></p>
<ul>
<li>1、兼容万国字符</li>
<li>2、兼容老的字符编码表</li>
</ul>
</li>
<li><p>UTF-8: 在unicode的基础上进行了优化,长度是可变的，英文字母1个字节表示，汉字通常是3个字节，生僻字4-6个字符</p>
</li>
</ul>
<h3 id="1-2-字符从硬盘到展示的编码过程"><a href="#1-2-字符从硬盘到展示的编码过程" class="headerlink" title="1.2 字符从硬盘到展示的编码过程"></a>1.2 字符从硬盘到展示的编码过程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                          内存                     硬盘</span><br><span class="line">万国字符-----------》unicode格式的二进制数--------》utf-<span class="number">8</span>格式的二进制数</span><br><span class="line">中文、英文字符- ----》unicode格式的二进制数--------》gbk格式的二进制数</span><br><span class="line">日文、英文字符- ----》unicode格式的二进制数--------》shift</span><br></pre></td></tr></table></figure>
<h3 id="1-3-保证不乱码的方法"><a href="#1-3-保证不乱码的方法" class="headerlink" title="1.3 保证不乱码的方法"></a>1.3 保证不乱码的方法</h3><ul>
<li><p>1、保证存不乱码<br>存内存不用管，因为内存固定使用unicode格式<br>存入硬盘的编码格式统一改改为utf-8</p>
</li>
<li><p>2、保证取不乱码<br>编码与解码用的是同一张字符编码表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3解释器默认读文件的编码格式是utf-8</span><br><span class="line">python2解释器默认读文件的编码格式是ascii</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-文件处理"><a href="#2-文件处理" class="headerlink" title="2 文件处理"></a>2 文件处理</h2><h3 id="2-1-file对象常用方法"><a href="#2-1-file对象常用方法" class="headerlink" title="2.1 file对象常用方法"></a>2.1 file对象常用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.判断文件是否可读或者可写,返回值为True或者False</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.readable())</span><br><span class="line">    <span class="built_in">print</span>(f.writable())</span><br><span class="line"><span class="comment">#2.f.readline() 读取一行内容,光标移动到第二行首部</span></span><br><span class="line">    line = f.readline()</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"><span class="comment">#3.f.readlines() 读取每一行的内容,存放于列表中</span></span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(lines)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;wt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#4.f.writelines() 向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换符。</span></span><br><span class="line">    names =  [<span class="string">&quot;egon&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;lili&quot;</span>]</span><br><span class="line">    <span class="comment"># for name in names:</span></span><br><span class="line">    <span class="comment">#     f.write(name)</span></span><br><span class="line">    f.writelines(names)</span><br><span class="line">    f.write(<span class="string">&quot;1111\n222\n333\n&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    f.writelines(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;aaaaa&quot;</span>)</span><br><span class="line"><span class="comment">#5.f.flush() 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</span></span><br><span class="line">    f.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;at&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.truncate(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#6.f.truncate()从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 windows 系统下的换行代表2个字符大小。</span></span><br></pre></td></tr></table></figure>
<h2 id="3-控制文件指针移动"><a href="#3-控制文件指针移动" class="headerlink" title="3 控制文件指针移动"></a>3 控制文件指针移动</h2><h3 id="3-1-控制文件内指针移动的单位"><a href="#3-1-控制文件内指针移动的单位" class="headerlink" title="3.1 控制文件内指针移动的单位"></a>3.1 控制文件内指针移动的单位</h3><p><strong>只有t模式下的read(n)代表的是字符个数，除此之外全都是字节个数</strong><br>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控制文件内指针移动的单位: 只有t模式下的read(n)代表的是字符个数，除此之外全都是字节个数</span></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     res = f.read(<span class="number">6</span>)</span><br><span class="line">     <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     <span class="comment"># res = f.read(6)</span></span><br><span class="line">     res = f.read(<span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-主动控制文件指针移动的三种模式"><a href="#3-2-主动控制文件指针移动的三种模式" class="headerlink" title="3.2 主动控制文件指针移动的三种模式"></a>3.2 主动控制文件指针移动的三种模式</h3><ul>
<li> 0模式: 参照文件开头移动n个字节<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f.seek(3,0)</span></span><br><span class="line"><span class="comment"># f.seek(6,0)</span></span><br></pre></td></tr></table></figure></li>
<li>1模式: 参照当前所在的位置移动n个字节<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f.seek(3,1)</span></span><br><span class="line"><span class="comment"># f.seek(6,1)</span></span><br></pre></td></tr></table></figure></li>
<li>2模式: 参照文件末尾置移动n个字节<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># f.seek(-3,2)</span></span><br><span class="line"><span class="comment"># f.seek(-6,2)</span></span><br></pre></td></tr></table></figure></li>
<li><em>ps: 只有0模式可以在t下使用，1和2模式都只能在b下使用</em>*</li>
</ul>
<h3 id="3-3-实现-tail-f-access-log"><a href="#3-3-实现-tail-f-access-log" class="headerlink" title="3.3 实现 tail -f access.log"></a>3.3 实现 tail -f access.log</h3><ul>
<li>日志写入</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;access.log&#x27;</span>, <span class="string">&#x27;at&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(<span class="string">&#x27;%s %s&#x27;</span> % (time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>), <span class="string">&#x27;egon给lxxx转了一个亿&#x27;</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li>tail功能</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Me/access.log&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.seek(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = f.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">0</span>:</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-文件修改的两种方式"><a href="#4-文件修改的两种方式" class="headerlink" title="4 文件修改的两种方式"></a>4 文件修改的两种方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件的两种方式</span></span><br><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line"><span class="comment"># 1、将文件内容一次性全部读入内存</span></span><br><span class="line"><span class="comment"># 2、在内存中将内容修改完毕</span></span><br><span class="line"><span class="comment"># 3、将新内容写回原文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Me/b.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">  data = f1.read()</span><br><span class="line">  res = data.replace(<span class="string">&quot;egon&quot;</span>, <span class="string">&#x27;EGON&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Me/b.txt&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">  f2.write(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：</span></span><br><span class="line"><span class="comment"># 1、以读的方式打开源文件，以写的方式打开一个临时文件</span></span><br><span class="line"><span class="comment"># 2、从源文件中读出一行内容都内存中，修改完毕后再写入临时文件，循环往复直到读完原件</span></span><br><span class="line"><span class="comment"># 3、删除源文件，将临时文件改名为源文件名</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Me/b.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> src_f,</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">&#x27;.b.txt.swp&#x27;</span>, mode=<span class="string">&#x27;wt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> dst_f:</span><br><span class="line">  <span class="keyword">for</span> line <span class="keyword">in</span> src_f:</span><br><span class="line">    dst_f.write(line.replace(<span class="string">&#x27;EGON&#x27;</span>, <span class="string">&#x27;egon&#x27;</span>))</span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&#x27;Me/b.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;.b.txt.swp&#x27;</span>, <span class="string">&#x27;Me/b.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day10</title>
    <url>/2021/03/25/day10/</url>
    <content><![CDATA[<p>函数、函数参数</p>
<span id="more"></span>
<h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h2><h3 id="1-1-函数三问"><a href="#1-1-函数三问" class="headerlink" title="1.1 函数三问"></a>1.1 函数三问</h3><ul>
<li><strong>1、什么是函数</strong></li>
</ul>
<p>函数就是盛放代码的容器，把实现某一功能的一组代码丢到一个函数中，就做成了一个小工具</p>
<p>具备某一功能的工具 ——–》函数<br>事先准备工具的过程 ——–》函数的定义<br>遇到应用场景拿来就用 ——-》函数的调用</p>
<ul>
<li><p><strong>2、为何要用函数</strong><br>在没有用函数之前面临的问题：<br>1、代码冗余，程序组织结构不清晰、可读性差<br>2、扩展性差</p>
</li>
<li><p><strong>3、如何用函数</strong><br>原则：先定义、后调用</p>
<ul>
<li><strong>定义函数的语法：</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,...</span>):</span></span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		文档注释</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">		代码<span class="number">1</span></span><br><span class="line">		代码<span class="number">2</span></span><br><span class="line">		代码<span class="number">3</span></span><br><span class="line">		<span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure></li>
<li><strong>如何调用函数:</strong>函数名(1,2,3)</li>
<li><strong>先定义、后调用</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">   	<span class="built_in">print</span>(<span class="string">&quot;start...&quot;</span>)</span><br><span class="line">   	<span class="built_in">print</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">   	<span class="built_in">print</span>(<span class="string">&quot;stop...&quot;</span>)</span><br><span class="line">func()</span><br><span class="line">func()</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>
<h3 id="1-2-函数在定义阶段发生的什么事情"><a href="#1-2-函数在定义阶段发生的什么事情" class="headerlink" title="1.2 函数在定义阶段发生的什么事情"></a>1.2 函数在定义阶段发生的什么事情</h3>定义函数不执行函数体代码，但是会检测函数体语法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># x = 100</span></span><br><span class="line"><span class="comment"># print(x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span>  <span class="comment"># func=函数的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start...&quot;</span>)</span><br><span class="line">    x</span><br><span class="line">    <span class="comment"># if True</span></span><br><span class="line">    <span class="comment">#     print(&#x27;ok&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stop...&quot;</span>)</span><br><span class="line"><span class="comment"># 这个时候不会报错因为语法是正确的</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># 执行函数的时候就会报错了，因为x没有定义</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3函数在调用阶段发生的什么事情"><a href="#1-3函数在调用阶段发生的什么事情" class="headerlink" title="1.3函数在调用阶段发生的什么事情"></a>1.3函数在调用阶段发生的什么事情</h3>先通过函数名找到函数的内存地址，然后函数的内存地址()会触发函数体代码的运行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span>  <span class="comment"># func=函数的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;stop...&quot;</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>练习：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#案例1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错，因为函数bar没有定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line">    </span><br><span class="line">foo()</span><br><span class="line"><span class="comment">#不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">    bar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="comment"># 不会报错</span></span><br></pre></td></tr></table></figure>
<h2 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2 函数参数"></a>2 函数参数</h2><h3 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h3><ul>
<li>1、形参：在函数定义阶段括号内定义的变量名，称之为形式参数，简称形参</li>
<li>2、实参：在函数调用阶段括号内传入的值，称之为实际参数，简称实参<h3 id="2-2-形参与实参的关系"><a href="#2-2-形参与实参的关系" class="headerlink" title="2.2 形参与实参的关系"></a>2.2 形参与实参的关系</h3>在调用函数时，实参的值会绑定给形参名，然后可以在函数内使用，函数调用完毕后，解除绑定<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y</span>):</span></span><br><span class="line">     x=<span class="number">1</span></span><br><span class="line">     y=<span class="number">2</span></span><br><span class="line">     <span class="built_in">print</span>(x+y)</span><br><span class="line">m = <span class="number">1</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line">func(m,n)</span><br></pre></td></tr></table></figure>
<h3 id="2-3参数详解"><a href="#2-3参数详解" class="headerlink" title="2.3参数详解"></a>2.3参数详解</h3><h4 id="2-3-1-位置形参"><a href="#2-3-1-位置形参" class="headerlink" title="2.3.1 位置形参"></a>2.3.1 位置形参</h4>在函数定义阶段按照从左到右的顺序依次定义的形参，称之为位置形参</li>
<li>*特点**：必须被传值，多一个不行少一个也不行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y</span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x+y)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#下面两种方法都是错误的</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">func(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-默认形参"><a href="#2-3-2-默认形参" class="headerlink" title="2.3.2 默认形参"></a>2.3.2 默认形参</h4>在函数定义阶段就已经为某个形参赋值了，称之为默认形参</li>
<li><em>特点：</em>* 在函数定义阶段就已经赋值了，意味着在调用阶段可以不用为其赋值</li>
</ul>
<p><strong>ps:可以混用位置形参与默认形参，但是位置形参必须在前</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y=<span class="number">2</span></span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,age,gender=<span class="string">&quot;male&quot;</span></span>):</span></span><br><span class="line">     <span class="built_in">print</span>(name,age,gender)</span><br><span class="line"></span><br><span class="line">register(<span class="string">&quot;李铁蛋&quot;</span>,<span class="number">38</span>)</span><br><span class="line">register(<span class="string">&quot;王全蛋&quot;</span>,<span class="number">19</span>)</span><br><span class="line">register(<span class="string">&quot;赵银蛋&quot;</span>,<span class="number">28</span>)</span><br><span class="line">register(<span class="string">&quot;lili&quot;</span>,<span class="number">18</span>,<span class="string">&quot;female&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>默认形参需要注意的问题是:</strong></p>
<ul>
<li>1、默认形参的值只在函数定义阶段被赋值一次</li>
<li>2、默认形参的值通常应该是不可变类型<h5 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y=m</span>):</span>  <span class="comment"># y -&gt; 100的内存地址</span></span><br><span class="line">     <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">m = <span class="number">200</span></span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#执行结果为100</span></span><br></pre></td></tr></table></figure>
<h5 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = [<span class="number">11</span>,<span class="number">22</span>,]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y=m</span>):</span>  <span class="comment"># y -&gt; [11,22,]的内存地址</span></span><br><span class="line">     <span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 200</span></span><br><span class="line">m.append(<span class="number">33</span>)</span><br><span class="line">func(<span class="number">11</span>,m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果11 [11, 22, 33]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name,x,hobbies=<span class="literal">None</span></span>):</span>  <span class="comment"># hobbies = []内地址</span></span><br><span class="line">    <span class="keyword">if</span> hobbies <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        hobbies = []</span><br><span class="line">    hobbies.append(x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s 的爱好是 %s&quot;</span> %(name,hobbies))</span><br><span class="line"></span><br><span class="line">register(<span class="string">&quot;egon&quot;</span>,<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">register(<span class="string">&quot;liu&quot;</span>,<span class="string">&#x27;chou&#x27;</span>)</span><br><span class="line">register(<span class="string">&quot;hxx&quot;</span>,<span class="string">&#x27;tang&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-3-位置实参"><a href="#2-3-3-位置实参" class="headerlink" title="2.3.3 位置实参"></a>2.3.3 位置实参</h4><p>在函数调用阶段按照从左到右的顺序依次传入的值，称之为位置实参<br><strong>特点：按照顺序与形参一一对应</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y</span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">func(<span class="number">2</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-4-关键字实参"><a href="#2-3-4-关键字实参" class="headerlink" title="2.3.4 关键字实参"></a>2.3.4 关键字实参</h4><p>在函数调用阶段按照key=value的格式传入的值，称之为关键字实参<br><strong>特点：</strong>可以打乱顺序，但是仍然能够为指定的形参赋值</p>
<p><strong>ps：</strong>可以混用位置实参与关键字实参，但是</p>
<ul>
<li>1、位置实参必须在关键字实参前</li>
<li>2、不能为同一个形参重复赋值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y</span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">func(y=<span class="number">2</span>,x=<span class="number">1</span>)</span><br><span class="line">func(<span class="number">1</span>,y=<span class="number">2</span>)</span><br><span class="line">func(y=<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,y=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-5-与-在形参与实参中的应用"><a href="#2-3-5-与-在形参与实参中的应用" class="headerlink" title="2.3.5 *与**在形参与实参中的应用"></a>2.3.5 *与**在形参与实参中的应用</h4></li>
<li>*可变长的参数：**可变长指的是在函数调用阶段，实参的个数不固定,而实参是为形参赋值的，所以对应着必须要有一种特殊格式的形参能用来接收溢出的实参</li>
</ul>
<ul>
<li>形参中带*：<br>  *会接收溢出的位置实参，然后将其存成元组，然后赋值给紧跟其后的变量名<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,*args</span>):</span>  <span class="comment"># y=(2, 3, 4, 5, 6)</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">     res = <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> num <span class="keyword">in</span> args:</span><br><span class="line">         res += num</span><br><span class="line">     <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">my_sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_sum(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<code>*后跟的必须是一个可以被for循环遍历的类型，*会将实参打散成位置实参</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(y)</span><br><span class="line">     <span class="built_in">print</span>(z)</span><br><span class="line">func(*[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])  <span class="comment"># func(11,22,33)</span></span><br><span class="line">func(*<span class="string">&quot;hello&quot;</span>)  <span class="comment"># func(&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>形参中带</strong>：**<br>  **会接收溢出的关键字实参，然后将其存成字典，然后赋值给紧跟其后的变量名<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,**kwargs</span>):</span>  <span class="comment">#y = &#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)  <span class="comment"># 报错</span></span><br><span class="line">````</span><br><span class="line">**后跟的必须是一个字典，会将实参打散成关键字实参</span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line">     <span class="built_in">print</span>(x)</span><br><span class="line">     <span class="built_in">print</span>(y)</span><br><span class="line">     <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">func(**&#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>,<span class="string">&quot;y&quot;</span>:<span class="number">2</span>,<span class="string">&quot;z&quot;</span>:<span class="number">3</span>&#125;)  <span class="comment"># func(z=3,x=1,y=2)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">x,y,z</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span>  <span class="comment"># args = (1,2,3,4,5,6,7)  kwargs=  &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125; 此处*和**的作用是聚合</span></span><br><span class="line">    <span class="comment"># print(args)</span></span><br><span class="line">    <span class="comment"># print(kwargs)</span></span><br><span class="line">    index(*args,**kwargs)  <span class="comment"># index(*(1,2,3,4,5,6,7),**&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;)  此处 * 和 **的作用是打散</span></span><br><span class="line">                           <span class="comment"># index(1,2,3,4,5,6,7,a=1,b=2,c=3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wrapper(1,2,3,4,5,6,7,a=1,b=2,c=3)</span></span><br><span class="line"><span class="comment"># wrapper(1,2,3)</span></span><br><span class="line">wrapper(<span class="number">1</span>,z=<span class="number">3</span>,y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day11</title>
    <url>/2021/03/28/day11/</url>
    <content><![CDATA[<p>命名关键字参数、函数对象、函数嵌套…</p>
<span id="more"></span>
<h2 id="1-命名关键字参数"><a href="#1-命名关键字参数" class="headerlink" title="1 命名关键字参数"></a>1 命名关键字参数</h2><p><strong>命名关键字参数：</strong><br><code>*后定义的参数，必须被传值（有默认值的除外），且必须按照关键字实参的形式传递，可以保证，传入的参数中一定包含某些关键字</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x,n=<span class="number">3</span>,*args,m=<span class="number">333</span>,y,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,y=<span class="number">4</span>,m=<span class="number">5555</span>,a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">555</span></span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">name:<span class="built_in">str</span>,age:<span class="built_in">int</span></span>)-&gt;<span class="built_in">str</span>:</span> <span class="comment">#这里 :str 的作用是提示传入的参数需为字符串. :int 的作用是提示传入的参数需为int， --str 的作用是提示函数的返回值为 str</span></span><br><span class="line">    <span class="built_in">print</span>(name,age)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line"></span><br><span class="line">res = register(<span class="number">111111111</span>,<span class="string">&quot;aaaaa&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-函数对象、函数嵌套、名称空间与作用域、装饰器"><a href="#2-函数对象、函数嵌套、名称空间与作用域、装饰器" class="headerlink" title="2 函数对象、函数嵌套、名称空间与作用域、装饰器"></a>2 函数对象、函数嵌套、名称空间与作用域、装饰器</h2><h3 id="2-1-函数对象：函数是第一类对象，函数是第一等公民"><a href="#2-1-函数对象：函数是第一类对象，函数是第一等公民" class="headerlink" title="2.1 函数对象：函数是第一类对象，函数是第一等公民"></a>2.1 函数对象：函数是第一类对象，函数是第一等公民</h3><p><strong>函数可以被当成变量去用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span>  <span class="comment"># func = 函数的内存地址</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span>  <span class="comment"># x = 10的内存地址</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>1、可以被赋值</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x</span><br><span class="line">f = func</span><br><span class="line"><span class="built_in">print</span>(f <span class="keyword">is</span> func)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure></li>
<li><strong>2、可以当做参数传给另外一个函数</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    a()</span><br><span class="line"></span><br><span class="line">foo(func)</span><br></pre></td></tr></table></figure></li>
<li><strong>3、可以当做函数的返回值</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">res = foo(func)</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">res()</span><br></pre></td></tr></table></figure></li>
<li><strong>4、可以当做容器类型的元素</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [x,func]</span><br><span class="line"><span class="comment"># print(l[0])</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l[<span class="number">1</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;注册&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;转账&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;提现&#x27;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line">func_dic = &#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:[<span class="string">&quot;登录&quot;</span>,login],</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:[<span class="string">&quot;注册&quot;</span>,register],</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:[<span class="string">&quot;转账&quot;</span>,transfer],</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:[<span class="string">&quot;提现&quot;</span>,withdraw],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;0 退出&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> func_dic:</span><br><span class="line">        <span class="built_in">print</span>(k,func_dic[k][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    choice =  <span class="built_in">input</span>(<span class="string">&quot;请输入您的命令编号：&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">        func_dic[choice][<span class="number">1</span>]()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入命令错误&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-函数的嵌套"><a href="#2-2-函数的嵌套" class="headerlink" title="2.2 函数的嵌套"></a>2.2 函数的嵌套</h3><h4 id="2-2-1函数的嵌套定义"><a href="#2-2-1函数的嵌套定义" class="headerlink" title="2.2.1函数的嵌套定义"></a>2.2.1函数的嵌套定义</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    x = <span class="number">111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;from f2&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(x)</span></span><br><span class="line">    <span class="comment"># print(f2)</span></span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span>(<span class="params">radius,mode=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimiter</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * pi * radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> pi * (radius ** <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> perimiter(radius)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> area(radius)</span><br><span class="line"></span><br><span class="line">circle(<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-函数的嵌套调用"><a href="#2-2-2-函数的嵌套调用" class="headerlink" title="2.2.2 函数的嵌套调用"></a>2.2.2 函数的嵌套调用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max4</span>(<span class="params">a,b,c,d</span>):</span></span><br><span class="line">    res1 = max2(a,b,)</span><br><span class="line">    res2 = max2(res1,c)</span><br><span class="line">    res3 = max2(res2,d)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"></span><br><span class="line">res = max4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<h3 id="2-3名称空间Namespaces"><a href="#2-3名称空间Namespaces" class="headerlink" title="2.3名称空间Namespaces"></a>2.3名称空间Namespaces</h3><p>存放名字与其对应的内存地址的地方</p>
<h4 id="2-3-1-名称空间分类"><a href="#2-3-1-名称空间分类" class="headerlink" title="2.3.1 名称空间分类"></a>2.3.1 名称空间分类</h4><ul>
<li><p>1、内置名称空间：存放的是python解释器自带的名字。生命周期：解释器启动则产生，解释器关闭则销毁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>2、全局名称空间：存放的是顶级的名字。生命周期：py程序刚开始运行则立即产生，py程序结束<br>x = 10<br>if True:<br>  y = 2</p>
</li>
</ul>
<p>def foo():<br>    z = 3</p>
<ul>
<li>3、局部名称空间：存放的是函数内的名字。生命周期：函数调用则产生，函数调用结束则销毁<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span> = <span class="number">111</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">len</span> = <span class="number">222</span></span><br><span class="line">    <span class="comment"># print(len)</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>
<h4 id="2-3-2-LEGB"><a href="#2-3-2-LEGB" class="headerlink" title="2.3.2 LEGB"></a>2.3.2 LEGB</h4><code>LEGB 代表名字查找顺序: locals -&gt; enclosing function -&gt; globals -&gt; __builtins__</code></li>
<li>locals 是函数内的名字空间，包括局部变量和形参</li>
<li>enclosing 外部嵌套函数的名字空间（闭包中常见）</li>
<li>globals 全局变量，函数定义所在模块的名字空间</li>
<li>builtins 内置模块的名字空间</li>
</ul>
<p><strong>总结:</strong></p>
<ul>
<li>1、名字的访问优先级：基于自己当前所在的位置向外一层一层查找，L-》E-》G-》B</li>
<li>2、名称空间的”嵌套”关系是函数定义阶段、扫描语法时生成的，与调用位置无关</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="comment"># x = 2222</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">            <span class="comment"># x = 3333</span></span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        f3()</span><br><span class="line">    x = <span class="number">1111</span></span><br><span class="line">    f2()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 案例1：</span></span><br><span class="line">x = <span class="number">666</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x=<span class="number">111</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：</span></span><br><span class="line">x = <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    x = <span class="number">1111</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;f2===&gt;&#x27;</span>,x)</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line">f = f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x=<span class="number">77777777777777777</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day12</title>
    <url>/2021/03/29/day12/</url>
    <content><![CDATA[<p>闭包函数、装饰器</p>
<span id="more"></span>
<h1 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h1><p><strong>闭函数：被封闭起来的函数=&gt;定义函数内部的函数，闭函数的特点是只能在函数内用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p><strong>包函数：该函数引用了一个名字，该名字是来自与e这一层的</strong><br><strong>总结：闭包函数指的是定义在函数内部的函数引用了一个来自于外层函数作用域中的名字</strong></p>
<p><strong>闭包函数升级：结合函数对象</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 千万不要加括号</span></span><br><span class="line"></span><br><span class="line">f = outter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    x = <span class="number">666</span></span><br><span class="line">    f()</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<h2 id="为函数体传参有两种解决方案"><a href="#为函数体传参有两种解决方案" class="headerlink" title="为函数体传参有两种解决方案"></a>为函数体传参有两种解决方案</h2><ul>
<li><p>方案一:直接以参数的形式传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">wrapper(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>方案二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># x = 100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> wrapper  <span class="comment"># 千万不要加括号</span></span><br><span class="line"></span><br><span class="line">f = outter(<span class="number">100</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="1、什么是装饰器"><a href="#1、什么是装饰器" class="headerlink" title="1、什么是装饰器"></a>1、什么是装饰器</h3><p>装饰器指的是装饰别人的工具，装饰指的则是为被装饰者添加新功能<br>但是实现装饰器必须遵循的原则是”开放封闭原则”<br>开放指的是对拓展新功能是开放的，封闭指的则是对修改源码以及调用方式是封闭的</p>
</li>
</ul>
<p>综上装饰器指的是我们要创建一个工具，该工具可以在遵循原则1和2的前提下还能为被装饰对象添加新功能</p>
<ul>
<li>原则1、不修改被装饰对象源代码</li>
<li>原则2、不修改被装饰对象调用方式<h3 id="2、为何要用装饰器"><a href="#2、为何要用装饰器" class="headerlink" title="2、为何要用装饰器"></a>2、为何要用装饰器</h3></li>
</ul>
<h3 id="3、如何实现装饰器"><a href="#3、如何实现装饰器" class="headerlink" title="3、如何实现装饰器"></a>3、如何实现装饰器</h3><p>装饰器-》函数<br>被装饰者-》函数</p>
<p><strong>准备被装饰者</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>

<h4 id="方案一：改变被装饰者的源代码"><a href="#方案一：改变被装饰者的源代码" class="headerlink" title="方案一：改变被装饰者的源代码"></a>方案一：改变被装饰者的源代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(end - start))</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
<h4 id="方案二：装饰器的功能需要重复编写，代码冗余"><a href="#方案二：装饰器的功能需要重复编写，代码冗余" class="headerlink" title="方案二：装饰器的功能需要重复编写，代码冗余"></a>方案二：装饰器的功能需要重复编写，代码冗余</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">index()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(end - start))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">index()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(end - start))</span><br></pre></td></tr></table></figure>

<h4 id="方案三：解决方案二的代码冗余问题-但是存在问题-》装饰器的功能写死了，只能装饰index函数"><a href="#方案三：解决方案二的代码冗余问题-但是存在问题-》装饰器的功能写死了，只能装饰index函数" class="headerlink" title="方案三：解决方案二的代码冗余问题,但是存在问题-》装饰器的功能写死了，只能装饰index函数"></a>方案三：解决方案二的代码冗余问题,但是存在问题-》装饰器的功能写死了，只能装饰index函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    index()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(end - start))</span><br><span class="line"></span><br><span class="line">wrapper()</span><br><span class="line">wrapper()</span><br></pre></td></tr></table></figure>
<h4 id="方案四：装饰器的功能写活"><a href="#方案四：装饰器的功能写活" class="headerlink" title="方案四：装饰器的功能写活"></a>方案四：装饰器的功能写活</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func = index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(end - start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index = outter(index)  <span class="comment">#  index = wrapper的内存地址</span></span><br><span class="line"><span class="comment"># print(index)</span></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>

<h4 id="方案五：装饰器的功能写活"><a href="#方案五：装饰器的功能写活" class="headerlink" title="方案五：装饰器的功能写活"></a>方案五：装饰器的功能写活</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome %s to home page&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func = 最原始那个home的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args,**kwargs)  <span class="comment"># 最原始那个home的内存地址()</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> % (end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">home = outter(home)  <span class="comment"># home = wrapper的内存地址</span></span><br><span class="line">index = outter(index)  <span class="comment"># home = wrapper的内存地址</span></span><br><span class="line"></span><br><span class="line">res = home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># res = index()</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>
<h4 id="方案六、装饰器正确写法"><a href="#方案六、装饰器正确写法" class="headerlink" title="方案六、装饰器正确写法"></a>方案六、装饰器正确写法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func = 最原始那个home的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)  <span class="comment"># 最原始那个home的内存地址()</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> % (end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># index = outter(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter  </span><span class="comment"># home = outter(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;welcome %s to home page&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<h4 id="装饰器模板"><a href="#装饰器模板" class="headerlink" title="装饰器模板"></a>装饰器模板</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计时间的装饰器</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        stop = time.time()</span><br><span class="line">        <span class="built_in">print</span>(stop - start)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">认证功能装饰器</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        inp_user = <span class="built_in">input</span>(<span class="string">&#x27;Username: &#x27;</span>).strip()</span><br><span class="line">        inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;Password: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> inp_user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            res = func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth  </span><span class="comment"># index = auth(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
<h4 id="多装饰器调用"><a href="#多装饰器调用" class="headerlink" title="多装饰器调用"></a>多装饰器调用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span>(<span class="params">func1</span>):</span>  <span class="comment"># func1 = wrapper2的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===&gt;wrapper1&#x27;</span>)</span><br><span class="line">        res1 = func1(*args,**kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;end wrapper1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res1</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span>(<span class="params">func2</span>):</span>  <span class="comment"># func2 = wrapper3的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===&gt;wrapper2&#x27;</span>)</span><br><span class="line">        res2 = func2(*args,**kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;end wrapper2&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res2</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span>(<span class="params">func3</span>):</span>  <span class="comment"># func3 = 最原始那个index的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper3</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===&gt;wrapper3&#x27;</span>)</span><br><span class="line">        res3 = func3(*args,**kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;=====&gt;end wrapper3&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res3</span><br><span class="line">    <span class="keyword">return</span> wrapper3</span><br><span class="line"></span><br><span class="line">        <span class="comment"># index = wrapper1的内存地址</span></span><br><span class="line"><span class="meta">@deco1  </span><span class="comment"># deco1(wrapper2的内存地址)      ---&gt; wrapper1的内存地址  </span></span><br><span class="line"><span class="meta">@deco2  </span><span class="comment"># deco2(wrapper3的内存地址)      ---&gt; wrapper2的内存地址           </span></span><br><span class="line"><span class="meta">@deco3  </span><span class="comment"># deco3(最原始那个index的内存地址) ---&gt; wrapper3的内存地址           </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span>                                                            </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=======&gt;index&#x27;</span>)                                              </span><br><span class="line">                                                                        </span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day13</title>
    <url>/2021/03/30/day13/</url>
    <content><![CDATA[<p>有参装饰器、迭代器、生成器</p>
<span id="more"></span>
<h2 id="1-有参装饰器"><a href="#1-有参装饰器" class="headerlink" title="1 有参装饰器"></a>1 有参装饰器</h2><p>需求：实现一个用来为被装饰对象添加认证功能的装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基本形式如下</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    编写基于文件的认证，认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">  	<span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>如果我们想提供多种不同的认证方式以供选择，单从wrapper函数的实现角度改写如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">      	<span class="keyword">if</span> mode == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">          	编写基于文件的认证，认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">        <span class="keyword">elif</span> mode == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">            编写基于mysql认证，认证通过则执行res=func(*args,**kwargs),并返回res</span><br><span class="line">				<span class="keyword">return</span> wrapper    	</span><br></pre></td></tr></table></figure>

<p>函数wrapper需要一个mode参数，而函数deco与wrapper的参数都有其特定的功能，不能用来接受其他类别的参数，可以在deco的外部再包一层函数auth,用来专门接受额外的参数，这样便保证了在auth函数内无论多少层都可以引用到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">mode</span>):</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">      	<span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> deco</span><br></pre></td></tr></table></figure>

<p>此时我们就实现了一个有参装饰器，使用方式如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先调用auth(mode=&#x27;file&#x27;),得到@deco,deco是一个闭包函数，包含了对外部作用域名字mode的引用，@deco的语法意义与无参装饰器一样</span></span><br><span class="line"><span class="meta">@auth(<span class="params">mode=<span class="string">&#x27;file&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">  	<span class="keyword">pass</span></span><br><span class="line"><span class="meta">@auth(<span class="params">driver=<span class="string">&#x27;mysql&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">  	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最终版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">mode,yyy</span>):</span></span><br><span class="line">    <span class="comment"># mode = &#x27;mysql&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span>  <span class="comment"># func = index</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args ,**kwargs</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(yyy)</span><br><span class="line">            inp_user = <span class="built_in">input</span>(<span class="string">&#x27;Username: &#x27;</span>).strip()</span><br><span class="line">            inp_pwd = <span class="built_in">input</span>(<span class="string">&#x27;Password: &#x27;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> mode == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> inp_user == <span class="string">&quot;egon&quot;</span> <span class="keyword">and</span> inp_pwd == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">                    res = func(*args ,**kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;login failed&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> mode == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;基于mysql数据库的认证&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> mode == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;基于ldap数据库的认证&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;未知的认证来源&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params"><span class="string">&#x27;mysql&#x27;</span>,<span class="number">111</span></span>)  </span><span class="comment"># @outter  # index = outter(index)  # index = wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(<span class="params"><span class="string">&#x27;ldap&#x27;</span>,<span class="number">222</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello %s&#x27;</span> %name)</span><br><span class="line"><span class="comment"># print(index)</span></span><br><span class="line"><span class="comment"># index()</span></span><br><span class="line"></span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="wraps函数"><a href="#wraps函数" class="headerlink" title="wraps函数"></a>wraps函数</h3><p>可以使用help(函数名)来查看函数的文档注释，本质就是查看函数的doc属性，但对于被装饰之后的函数，查看文档注释</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    home page function</span></span><br><span class="line"><span class="string">    :param name: str</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to the home page&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(home))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">打印结果：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Help on function wrapper in module __main__:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wrapper(*args, **kwargs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">None</span></span><br></pre></td></tr></table></figure>

<p>在被装饰之后home=wrapper,查看home.name也可以发现home的函数名确实是wrapper,想要保留原函数的文档和函数名属性，需要修正装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">      	start_time = time.time()</span><br><span class="line">        res = func(*args,*kwargs)</span><br><span class="line">        stop_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      wrapper.__doc__ = func.__doc__</span><br><span class="line">      wrapper.__name__ = func.__name__</span><br><span class="line">      <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>按照上述方法实现保留原函数输赢过于麻烦，functools模块下提供一个装饰器wraps专门用来帮我们实现这件事，用发如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>装饰器模板</strong></p>
<ul>
<li>1、无参装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
<li>2、有参装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter2</span>(<span class="params">xxx</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            xxx</span><br><span class="line">            res = func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter2(<span class="params">xxx=<span class="number">111</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2 迭代器"></a>2 迭代器</h2><h3 id="1-什么是迭代器"><a href="#1-什么是迭代器" class="headerlink" title="1 什么是迭代器"></a>1 什么是迭代器</h3></li>
<li>*迭代器：**迭代取值的工具。</li>
<li>*迭代**：迭代是一个重复的过程，但是每次重复都是基于上一次的结果而来<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&quot;egon&quot;</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;lili&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">items</span>):</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(items):</span><br><span class="line"><span class="built_in">print</span>(items[i])</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="2-为何要用迭代器"><a href="#2-为何要用迭代器" class="headerlink" title="2 为何要用迭代器"></a>2 为何要用迭代器</h3></li>
</ul>
<p>对于序列类型：字符串、列表、元祖，我们可以使用索引的范式迭代取出其包含的元素。但对于字典、集合、文件等类型是没有索引测，若还想取出其内部包含的元素，则必须找出一种不依赖于索引的迭代方式，这就是迭代器</p>
<h3 id="3-如何用迭代器"><a href="#3-如何用迭代器" class="headerlink" title="3 如何用迭代器"></a>3 如何用迭代器</h3><ul>
<li>可迭代的对象<ul>
<li>内置有<code>__iter__</code>方法</li>
</ul>
</li>
<li>迭代器对象<ul>
<li>内置有<code>__iter__</code>方法</li>
<li>内置有<code>__next__</code>方法</li>
</ul>
</li>
</ul>
<p>调用: 可迭代对象<code>.__iter__()</code> –&gt; 返回迭代器对象<br>调用：迭代器对象<code>.__next__()</code> –&gt; 返回的是下一个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#字符串、列表、元祖、字典、集合、文件都是可迭代对象,都有__iter__方法</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span>.__iter__()</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].__iter__()</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).__iter__()</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">111</span>&#125;.__iter__()</span><br><span class="line">&#123;<span class="number">111</span>,<span class="number">22</span>&#125;.__iter__()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>).__iter__()</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">dic = <span class="string">&quot;hello&quot;</span></span><br><span class="line">iter_dic = dic.__iter__()</span><br><span class="line"><span class="built_in">print</span>(iter_dic)</span><br><span class="line"><span class="built_in">print</span>(iter_dic.__iter__().__iter__().__iter__() <span class="keyword">is</span> iter_dic) <span class="comment"># 返回结果是True,对迭代器对象执行__iter__()方法，返回的结果是它本身</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iter_dic)</span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__())  <span class="comment">#等同于next(iter_dic)</span></span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__())</span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__())</span><br><span class="line"><span class="built_in">print</span>(iter_dic.__next__())  <span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure>
<p>有了迭代器，我们就可以不依赖索引迭代取值了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">len</span>(<span class="string">&quot;hello&quot;</span>)  <span class="comment"># &quot;hello&quot;.__len__()</span></span><br><span class="line"></span><br><span class="line">iter_dic = <span class="built_in">iter</span>(dic)  <span class="comment"># dic.__iter__()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">next</span>(iter_dic))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#这么写太丑陋了，需要我们自己捕捉异常、控制next,python这么牛逼，能不能帮我们解决呢？能，请看for循环</span></span><br></pre></td></tr></table></figure>
<h3 id="4-for循环"><a href="#4-for循环" class="headerlink" title="4 for循环"></a>4 for循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于for循环，我们可以完全不再依赖索引去取值了</span></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(dic[k])</span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环的工作原理</span></span><br><span class="line"><span class="comment">#1：执行in后对象的dic.__iter__()方法，得到一个迭代器对象iter_dic</span></span><br><span class="line"><span class="comment">#2: 执行next(iter_dic),将得到的值赋值给k,然后执行循环体代码</span></span><br><span class="line"><span class="comment">#3: 重复过程2，直到捕捉到异常StopIteration,结束循环</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">iter_dic = <span class="built_in">iter</span>(dic)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_dic:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> iter_dic:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment">#这里第二次打印的结果为空，为什么会这样呢？</span></span><br><span class="line"><span class="comment">#iter_dic 是一个迭代器对象，用for就相当于执行了next(iter_dic)，将得到的值赋值给了k,第一次循环结束迭代器对象的值已经被取完。所以第二次for循环是取不到值的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接对字典for循环就不一样了</span></span><br><span class="line"><span class="comment">#每次for循环都相当于重新生成了一个迭代器对象，所以两次都能打印出所有值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br></pre></td></tr></table></figure>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h3><h4 id="迭代器对象优缺点："><a href="#迭代器对象优缺点：" class="headerlink" title="迭代器对象优缺点："></a>迭代器对象优缺点：</h4><ul>
<li>优点：</li>
</ul>
<ol>
<li>提供了一种新的、统一的取值方式（可以不依赖于索引以及key的）</li>
<li>惰性计算，不耗费内存</li>
</ol>
<ul>
<li>缺点：</li>
</ul>
<ol>
<li>取值不够灵活</li>
<li>一次性的，只能往后取，无法预知数据的个数</li>
</ol>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>函数内但凡出现yield关键字，再调用函数不会执行函数体代码，会得到一个生成器对象。生成器就是一种自定义的迭代器。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g = func()</span><br><span class="line"><span class="comment"># print(g)</span></span><br><span class="line"><span class="comment"># g.__iter__()</span></span><br><span class="line"><span class="comment"># g.__next__()</span></span><br><span class="line"><span class="comment">#g也有__iter__、__next__方法，所以生成器可以这么取值</span></span><br><span class="line">res1 = <span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">print</span>(res1)</span><br><span class="line"></span><br><span class="line">res2 = <span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">print</span>(res2)</span><br><span class="line"></span><br><span class="line">res3 = <span class="built_in">next</span>(g)</span><br><span class="line"><span class="built_in">print</span>(res3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(g)</span><br></pre></td></tr></table></figure>
<p><strong>实现一个可从1开始可以取到无穷大的生成器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">res = func()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义函数实现range功能</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span>(<span class="params">start,stop,step=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> my_range(<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>):  <span class="comment"># 1 3 5</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<p><strong>yiled VS return:</strong></p>
<ul>
<li>相同点：返回值层面都一样</li>
<li>不同点：return只能返回一次值函数就立即结束，而yield可以返回多次值<h3 id="1-列表生成式"><a href="#1-列表生成式" class="headerlink" title="1 列表生成式"></a>1 列表生成式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    nums.append(i**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">nums = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">nums = [<span class="string">&#x27;ok&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(nums)</span><br><span class="line"></span><br><span class="line">names = [<span class="string">&#x27;egon_nb&#x27;</span>,<span class="string">&quot;lxx_sb&quot;</span>,<span class="string">&quot;hxx_sb&quot;</span>]</span><br><span class="line"></span><br><span class="line">new_l = []</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name.endswith(<span class="string">&quot;_sb&quot;</span>):</span><br><span class="line">        new_l.append(name)</span><br><span class="line"></span><br><span class="line">new_l = [name <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> name.endswith(<span class="string">&quot;_sb&quot;</span>)]</span><br><span class="line"><span class="built_in">print</span>(new_l)</span><br></pre></td></tr></table></figure>
<h3 id="2-字典生成式"><a href="#2-字典生成式" class="headerlink" title="2 字典生成式"></a>2 字典生成式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = &#123;i:i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line">items = [(<span class="string">&#x27;k1&#x27;</span>,<span class="number">111</span>),(<span class="string">&#x27;k2&#x27;</span>,<span class="number">222</span>)]</span><br><span class="line"><span class="built_in">print</span>(&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> items&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="3-集合生成式"><a href="#3-集合生成式" class="headerlink" title="3 集合生成式"></a>3 集合生成式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br></pre></td></tr></table></figure>
<h3 id="4-生成器表达式"><a href="#4-生成器表达式" class="headerlink" title="4 生成器表达式"></a>4 生成器表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(res,<span class="built_in">type</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(res))</span><br></pre></td></tr></table></figure></li>
<li><em>统计文本文件a.txt中的字符串个数</em>*<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;rt&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(data))  <span class="comment"># 24</span></span><br><span class="line"><span class="comment">#很明显，用这种方式统计，当文本文件很大的时候，执行f.read()时候，服务器的内存一下子就被占满了，太浪费内存空间了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用for循环一行一行地读，内存占用就会小很多</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        res += <span class="built_in">len</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用生成器表达式实现</span></span><br><span class="line">    lines_size = (<span class="built_in">len</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> f)</span><br><span class="line">    res = <span class="built_in">sum</span>(lines_size)</span><br><span class="line">    </span><br><span class="line">    res = <span class="built_in">sum</span>(<span class="built_in">len</span>(line) <span class="keyword">for</span> line <span class="keyword">in</span> f) <span class="comment">#这里的）可以省略</span></span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2>面向过程编程是一种编写思想or编程范式<br>面向过程核心是“过程”二字，过程就是流程，流程指的就是先干什么、再干什么、后干什么<br>基于面向过程编写程序就好比在设计一条条流水线</li>
<li><em>面向过程的优缺点</em>*<br>优点：复杂的问题流程化、进而简单化<br>缺点：牵一发而动全身，扩展性差</li>
</ul>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day14</title>
    <url>/2021/03/31/day14/</url>
    <content><![CDATA[<p>函数递归调用、模块、匿名函数</p>
<span id="more"></span>
<h2 id="1函数的递归调用"><a href="#1函数的递归调用" class="headerlink" title="1函数的递归调用"></a>1函数的递归调用</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>函数的递归调用是函数嵌套调用的一种特殊形式。<br>具体指的是在调用一个函数的过程中又直接或者间接地调用自己，称之为函数的递归调用<br>函数的递归调用其实就是用函数实现的循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一下就是一个递归的例子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&#x27;from f1&#x27;</span>)</span><br><span class="line">     f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>
<h3 id="1-2-递归深度"><a href="#1-2-递归深度" class="headerlink" title="1.2 递归深度"></a>1.2 递归深度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit())</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">#1. 可以使用sys.getrecursionlimit()去查看递归深度，默认值为1000，虽然可以使用</span></span><br><span class="line"><span class="comment">#   sys.setrecursionlimit()去设定该值，但仍受限于主机操作系统栈大小的限制</span></span><br><span class="line"><span class="comment">#2. python不是一门函数式编程语言，无法对递归进行尾递归优化</span></span><br></pre></td></tr></table></figure>
<p><strong>一个递归的过程应该分为两个阶段：</strong></p>
<ul>
<li>1、回溯：向下一层一层调用</li>
<li>2、递推：向上一层一层返回<h3 id="1-3-应用"><a href="#1-3-应用" class="headerlink" title="1.3 应用"></a>1.3 应用</h3></li>
<li><em>1、推算年龄</em>*</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 分析过程：</span></span><br><span class="line">age(<span class="number">5</span>) = age(<span class="number">4</span>) + <span class="number">10</span></span><br><span class="line">age(<span class="number">4</span>) = age(<span class="number">3</span>) + <span class="number">10</span></span><br><span class="line">age(<span class="number">3</span>) = age(<span class="number">2</span>) + <span class="number">10</span></span><br><span class="line">age(<span class="number">2</span>) = age(<span class="number">1</span>) + <span class="number">10</span></span><br><span class="line">age(<span class="number">1</span>) = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">n &gt; 1 -&gt; age(n) = age(n-1) + 10</span><br><span class="line">n = 1 -&gt; age(1) = 18</span><br><span class="line"></span><br><span class="line"><span class="comment">##实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">18</span></span><br><span class="line">    <span class="keyword">return</span> age(n-<span class="number">1</span>) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">res = age(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<p>**2、打印出一个列表中的所有元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">7</span>,[<span class="number">8</span>,]]]]]]]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(item) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">            func(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func([1,[2,[3,[4,[5,[6,[7,[8,]]]]]]]])</span></span><br></pre></td></tr></table></figure>
<p>**3、利用二分法从nums中找出需要导入的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [-<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">18</span>,<span class="number">22</span>,<span class="number">38</span>,<span class="number">78</span>,<span class="number">98</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">find_num,nums</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums)  == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not exists&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the right</span></span><br><span class="line">        new_nums = nums[mid_index+<span class="number">1</span>:]</span><br><span class="line">        search(find_num,new_nums)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; nums[mid_index]:</span><br><span class="line">        <span class="comment"># in the left</span></span><br><span class="line">        new_nums = nums[:mid_index]</span><br><span class="line">        search(find_num,new_nums)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># search(22,nums)</span></span><br><span class="line">search(<span class="number">23</span>,nums)</span><br></pre></td></tr></table></figure>
<h2 id="2-模块"><a href="#2-模块" class="headerlink" title="2 模块"></a>2 模块</h2><h3 id="2-1-三问"><a href="#2-1-三问" class="headerlink" title="2.1 三问"></a>2.1 三问</h3><h4 id="1、什么是模块"><a href="#1、什么是模块" class="headerlink" title="1、什么是模块"></a>1、什么是模块</h4><p>模块就是一系列功能的集合体<br><strong>模块分为四种类别：</strong></p>
<ul>
<li>1、一个py文件就可以是一个模块</li>
<li>2、包：就是一个存放有__init__.py文件的文件夹</li>
<li>3、使用C编写并链接到python解释器的内置模块</li>
<li>4、已被编译为共享库或DLL的C或C++扩展</li>
</ul>
<p><strong>模块有三种来源</strong></p>
<ul>
<li>1、python解释器自带的（内置的、标准库）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 内置库</span></span><br><span class="line"><span class="built_in">print</span>(time)</span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 标准库</span></span><br><span class="line"><span class="built_in">print</span>(os)</span><br></pre></td></tr></table></figure></li>
<li>2、第三方的库</li>
<li>3、自定义的库<h4 id="2、为何要用模块"><a href="#2、为何要用模块" class="headerlink" title="2、为何要用模块"></a>2、为何要用模块</h4></li>
<li>1、拿来主义，极大地提升开发效率</li>
<li>2、解决代码冗余问题</li>
</ul>
<h4 id="3、如何用模块"><a href="#3、如何用模块" class="headerlink" title="3、如何用模块"></a>3、如何用模块</h4><h3 id="3-1-import语句"><a href="#3-1-import语句" class="headerlink" title="3.1 import语句"></a>3.1 import语句</h3><p>有如下示范文件#文件名：foo.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    x=<span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;from the func&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>要想在另外一个py文件中引用foo.py中的功能，需要使用import foo，<br><strong>首次导入模块会做三件事：</strong></p>
<ul>
<li>1、执行源文件代码</li>
<li>2、产生一个新的名称空间用于存放源文件执行过程中产生的名字</li>
<li>3、在当前执行文件所在的名称空间中得到一个名字foo，该名字指向新创建的模块名称空间，若要引用模块名称空间中的名字，需要加上该前缀，如下<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="comment">#导入模块foo</span></span><br><span class="line">a=foo.x <span class="comment">#引用模块foo中变量x的值赋值给当前名称空间中的名字a</span></span><br><span class="line">foo.get() <span class="comment">#调用模块foo的get函数</span></span><br><span class="line">foo.change() <span class="comment">#调用模块foo中的change函数</span></span><br><span class="line">obj=foo.Foo() <span class="comment">#使用模块foo的类Foo来实例化，进一步可以执行obj.func()</span></span><br></pre></td></tr></table></figure>
<img src="import.png" alt="avatar"><br>加上foo.作为前缀就相当于指名道姓地说明要引用foo名称空间中的名字，所以肯定不会与当前执行文件所在名称空间中的名字相冲突，并且若当前执行文件的名称空间中存在x，执行foo.get()或foo.change()操作的都是源文件中的全局变量x。</li>
</ul>
<h3 id="from-import-语句"><a href="#from-import-语句" class="headerlink" title="from import 语句"></a>from import 语句</h3><p>from…import…与import语句基本一致，唯一不同的是：使用import foo导入模块后，引用模块中的名字都需要加上foo.作为前缀，而使用from foo import x,get,change,Foo则可以在当前执行文件中直接引用模块foo中的名字，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> x,get,change <span class="comment">#将模块foo中的x和get导入到当前名称空间</span></span><br><span class="line">a=x <span class="comment">#直接使用模块foo中的x赋值给a</span></span><br><span class="line">get() <span class="comment">#直接执行foo中的get函数</span></span><br><span class="line">change() <span class="comment">#即便是当前有重名的x，修改的仍然是源文件中的x</span></span><br></pre></td></tr></table></figure>
<p><img src="/Users/dgt/Downloads/day14/Me/f_import.png" alt="avatar"></p>
<p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p>
<h2 id="3-匿名函数-lambda"><a href="#3-匿名函数-lambda" class="headerlink" title="3 匿名函数,lambda"></a>3 匿名函数,lambda</h2><p>对比使用def关键字创建的是有名字的函数，使用lambda关键字创建则是没有名字的函数，即匿名函数，语法如下:<br><code>lambda 参数1,参数2,...: expression</code><br>匿名函数与有名函数有相同的作用域，但是匿名意味着引用计数为0，使用一次就释放，所以匿名函数用于临时使用一次的场景，匿名函数通常与其他函数配合使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##例1</span></span><br><span class="line">res = (<span class="keyword">lambda</span> x,y:x + y)(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">##例2</span></span><br><span class="line">salaries = &#123;</span><br><span class="line">     <span class="string">&#x27;axx&#x27;</span>:<span class="number">1000000</span>,</span><br><span class="line">     <span class="string">&#x27;zxx&#x27;</span>:<span class="number">3000</span>,</span><br><span class="line">     <span class="string">&#x27;egon&#x27;</span>:<span class="number">4000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(max([1,2,3,4]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def func(k):</span></span><br><span class="line"><span class="comment">#     return salaries[k]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(max(salaries,key=func))</span></span><br><span class="line"><span class="comment"># print(max(salaries,key=lambda k:salaries[k]))</span></span><br><span class="line"><span class="comment"># print(min(salaries,key=lambda k:salaries[k]))</span></span><br><span class="line"><span class="comment"># print(sorted(salaries,key=lambda k:salaries[k]))</span></span><br><span class="line"><span class="comment"># print(sorted(salaries,))</span></span><br></pre></td></tr></table></figure>
<h2 id="4-filter、map、reduce"><a href="#4-filter、map、reduce" class="headerlink" title="4 filter、map、reduce"></a>4 filter、map、reduce</h2><p>map、reduce、filter都支持迭代器协议，用来处理可迭代对象，我们以一个可迭代对象array为例来介绍它们三个的用法<br>array=[1,2,3,4,5]<br>#要求一：对array的每个元素做平方处理，可以使用map函数map函数可以接收两个参数，一个是函数，另外一个是可迭代对象，具体用法如下</p>
<h3 id="4-1-map"><a href="#4-1-map" class="headerlink" title="4.1 map"></a>4.1 map</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,array)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x1033f45f8</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment">#解析：map会依次迭代array，得到的值依次传给匿名函数（也可以是有名函数），而map函数得到的结果仍然是迭代器。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(res) <span class="comment">#使用list可以依次迭代res，取得的值作为列表元素</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>
<h3 id="4-2-reduce"><a href="#4-2-reduce" class="headerlink" title="4.2 reduce"></a>4.2 reduce</h3><p>要求二：对array进行合并操作，比如求和运算，这就用到了reduce函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#reduce函数可以接收三个参数，一个是函数，第二个是可迭代对象，第三个是初始值# reduce在python2中是内置函数，在python3中则被集成到模块functools中，需要导入才能使用</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=reduce(<span class="keyword">lambda</span> x,y:x+y,array)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line"><span class="comment">#解析：1 没有初始值，reduce函数会先迭代一次array得到的值作为初始值，作为第一个值数传给x，然后继续迭代一次array得到的值作为第二个值传给y，运算的结果为3</span></span><br><span class="line"><span class="comment">#     2 将上一次reduce运算的结果作为第一个值传给x，然后迭代一次array得到的结果作为第二个值传给y，依次类推，知道迭代完array的所有元素，得到最终的结果15也可以为reduce指定初始值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=reduce(<span class="keyword">lambda</span> x,y:x+y,array,<span class="number">100</span>)&gt;&gt;&gt; res</span><br><span class="line"><span class="number">115</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter"></a>4.3 filter</h3><p>要求三：对array进行过滤操作，这就用到了filter函数，比如过滤出大于3的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&gt;<span class="number">3</span>,array)</span><br><span class="line"><span class="comment">#解析：filter函数会依次迭代array，得到的值依次传给匿名函数，如果匿名函数的返回值为真，则过滤出该元素，而filter函数得到的结果仍然是迭代器。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(res) </span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>day15</title>
    <url>/2021/04/01/day15/</url>
    <content><![CDATA[<p>软件开发目录规范、时间、random模块</p>
<span id="more"></span>
<h2 id="1-一个python文件的两种用途"><a href="#1-一个python文件的两种用途" class="headerlink" title="1 一个python文件的两种用途"></a>1 一个python文件的两种用途</h2><ul>
<li>1、被当做程序运行</li>
<li>2、被当做模块导入</li>
</ul>
<p>每个python文件都会内置一个<code>__name__</code>变量<br>#eg: 现在有一个foo.py文件</p>
<ul>
<li>1、当foo.py被运行时<code>__name__</code>的值为”<code>__main__</code>“</li>
<li>2、当foo.py被当做模块导入时,<code>__name__</code>的值为”foo”<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因此我们在文件结尾可以这样写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    xxx()</span><br><span class="line"></span><br><span class="line"><span class="comment">#当py文件被直接运行时,执行xxx()</span></span><br><span class="line"><span class="comment">#当py问价被导入时，则不执行xxx()</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-时间模块"><a href="#2-时间模块" class="headerlink" title="2 时间模块"></a>2 时间模块</h2><p><a href="https://www.cnblogs.com/linhaifeng/articles/6384466.html#_label1">博客</a></p>
<h3 id="2-1-时间分为三种格式"><a href="#2-1-时间分为三种格式" class="headerlink" title="2.1 时间分为三种格式"></a>2.1 时间分为三种格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 1、时间戳</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="number">1617282446.782401</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、格式化的字符</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>))</span><br><span class="line"><span class="number">2021</span>-04-01 <span class="number">21</span>:08:03 PM</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3、结构化的时间对象</span></span><br><span class="line">&gt;&gt;&gt;obj = time.localtime()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(obj)</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">21</span>, tm_min=<span class="number">8</span>, tm_sec=<span class="number">31</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">91</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(obj.tm_year)</span><br><span class="line"><span class="number">2021</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(obj.tm_wday)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-三种格式转换"><a href="#2-2-三种格式转换" class="headerlink" title="2.2 三种格式转换"></a>2.2 三种格式转换</h3><p><img src="time.png" alt="avatar"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转换练习</span></span><br><span class="line"><span class="comment">#1.localtime 和 gmtime</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(time.localtime())</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">21</span>, tm_min=<span class="number">14</span>, tm_sec=<span class="number">15</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">91</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(time.gmtime())</span><br><span class="line">time.struct_time(tm_year=<span class="number">2021</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">13</span>, tm_min=<span class="number">14</span>, tm_sec=<span class="number">38</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">91</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.struct_time转格式化的字符串时间</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">struct_time = time.localtime(<span class="number">333333333</span>)</span><br><span class="line">strf_time = time.strftime(<span class="string">&quot;%m:%Y&quot;</span>,struct_time)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(strf_time)</span><br><span class="line">07:<span class="number">1980</span></span><br><span class="line"><span class="comment">#3.struct_time转时间戳</span></span><br><span class="line">struct_time = time.strptime(<span class="string">&#x27;2017-11-11 11:11:11&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">res = time.mktime(struct_time)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(res)</span><br><span class="line"><span class="number">1510369871.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.asctime和ctime</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(time.asctime())</span><br><span class="line">Thu Apr  <span class="number">1</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">38</span> <span class="number">2021</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(time.ctime())</span><br><span class="line">Thu Apr  <span class="number">1</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">38</span> <span class="number">2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.datetime</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line">&gt;&gt;&gt;<span class="number">2021</span>-04-01 <span class="number">21</span>:<span class="number">27</span>:<span class="number">21.895063</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=<span class="number">3</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">2021</span>-04-02 <span class="number">00</span>:<span class="number">27</span>:<span class="number">55.533965</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=-<span class="number">3</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">2021</span>-04-01 <span class="number">18</span>:<span class="number">28</span>:<span class="number">35.094804</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now() - datetime.timedelta(hours=<span class="number">3</span>))</span><br><span class="line">&gt;&gt;&gt;<span class="number">2021</span>-04-02 <span class="number">00</span>:<span class="number">28</span>:<span class="number">56.115935</span></span><br><span class="line"></span><br><span class="line">res = datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(res.date())</span><br><span class="line"><span class="number">2021</span>-04-01</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(res.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>))</span><br><span class="line"><span class="number">21</span>:<span class="number">29</span>:<span class="number">55</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(res.replace(hour=<span class="number">10</span>))</span><br><span class="line"><span class="number">2021</span>-04-01 <span class="number">10</span>:<span class="number">29</span>:<span class="number">55.066139</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-random模块"><a href="#3-random模块" class="headerlink" title="3 random模块"></a>3 random模块</h2><h3 id="3-1-基本用法"><a href="#3-1-基本用法" class="headerlink" title="3.1 基本用法"></a>3.1 基本用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#1.生成小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.random())  <span class="comment"># (0,1)</span></span><br><span class="line"><span class="number">0.35029681919165045</span></span><br><span class="line"><span class="comment">#2.生成数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.randint(<span class="number">3</span>,<span class="number">5</span>))  <span class="comment"># [3,5]</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment">#3.生成数字</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.randrange(<span class="number">3</span>,<span class="number">5</span>))  <span class="comment"># [3,5)</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment">#4.从可迭代对象中随机选择一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.choice([<span class="number">111</span>,<span class="number">222</span>,<span class="string">&quot;aaa&quot;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)]))</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#5.返回一个包含列表中任何两项的列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.sample([<span class="number">111</span>,<span class="number">222</span>,<span class="string">&quot;aaa&quot;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)],<span class="number">2</span>))</span><br><span class="line">[<span class="number">111</span>, <span class="number">222</span>]</span><br><span class="line"><span class="comment">#6.返回小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(random.uniform(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">1.1889052508854532</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">#7.shuffle() 方法将序列的所有元素随机排序。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(item)</span><br><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 储备知识</span></span><br></pre></td></tr></table></figure>
<h3 id="3-2-asc字符编码表转换"><a href="#3-2-asc字符编码表转换" class="headerlink" title="3.2  asc字符编码表转换"></a>3.2  asc字符编码表转换</h3><p><img src="zifu.jpeg" alt="avatar"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">90</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="3-3-编写随机验证码"><a href="#3-3-编写随机验证码" class="headerlink" title="3.3 编写随机验证码"></a>3.3 编写随机验证码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_code</span>(<span class="params">size=<span class="number">6</span></span>):</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">        num = <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">9</span>))</span><br><span class="line">        alpha = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">        res += random.choice([num, alpha])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(make_code())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python学习之路</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
